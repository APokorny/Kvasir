#pragma once 
#include "Register/Utility.hpp"
namespace Kvasir {
//None
    namespace Nonecontrol{    ///<Module Control
        using Addr = Register::Address<0x4002d000,0x0ffef8f8,0,unsigned>;
        ///AHB Clock Source Select. 
        enum class ahbselVal {
            lposc0=0x00000000,     ///<AHB clock source is the Low-Power Oscillator.
            lfosc0=0x00000001,     ///<AHB clock source is the Low-Frequency Oscillator.
            rtc0tclk=0x00000002,     ///<AHB clock source is the RTC0TCLK signal.
            extosc0=0x00000003,     ///<AHB clock source is the External Oscillator.
            viorfclk=0x00000004,     ///<AHB clock source is the VIORFCLK input pin.
            pll0osc=0x00000005,     ///<AHB clock source is the PLL.
            lposc0Div=0x00000006,     ///<AHB clock source is a divided version of the Low-Power Oscillator.
        };
        namespace ahbselValC{
            constexpr MPL::Value<ahbselVal,ahbselVal::lposc0> lposc0{};
            constexpr MPL::Value<ahbselVal,ahbselVal::lfosc0> lfosc0{};
            constexpr MPL::Value<ahbselVal,ahbselVal::rtc0tclk> rtc0tclk{};
            constexpr MPL::Value<ahbselVal,ahbselVal::extosc0> extosc0{};
            constexpr MPL::Value<ahbselVal,ahbselVal::viorfclk> viorfclk{};
            constexpr MPL::Value<ahbselVal,ahbselVal::pll0osc> pll0osc{};
            constexpr MPL::Value<ahbselVal,ahbselVal::lposc0Div> lposc0Div{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(2,0),Register::ReadWriteAccess,ahbselVal> ahbsel{}; 
        ///AHB Clock Divider. 
        enum class ahbdivVal {
            div1=0x00000000,     ///<AHB clock divided by 1.
            div2=0x00000001,     ///<AHB clock divided by 2.
            div4=0x00000002,     ///<AHB clock divided by 4.
            div8=0x00000003,     ///<AHB clock divided by 8.
            div16=0x00000004,     ///<AHB clock divided by 16.
            div32=0x00000005,     ///<AHB clock divided by 32.
            div64=0x00000006,     ///<AHB clock divided by 64.
            div128=0x00000007,     ///<AHB clock divided by 128.
        };
        namespace ahbdivValC{
            constexpr MPL::Value<ahbdivVal,ahbdivVal::div1> div1{};
            constexpr MPL::Value<ahbdivVal,ahbdivVal::div2> div2{};
            constexpr MPL::Value<ahbdivVal,ahbdivVal::div4> div4{};
            constexpr MPL::Value<ahbdivVal,ahbdivVal::div8> div8{};
            constexpr MPL::Value<ahbdivVal,ahbdivVal::div16> div16{};
            constexpr MPL::Value<ahbdivVal,ahbdivVal::div32> div32{};
            constexpr MPL::Value<ahbdivVal,ahbdivVal::div64> div64{};
            constexpr MPL::Value<ahbdivVal,ahbdivVal::div128> div128{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(10,8),Register::ReadWriteAccess,ahbdivVal> ahbdiv{}; 
        ///APB Clock Divider. 
        enum class apbdivVal {
            div1=0x00000000,     ///<APB clock is the same as the AHB clock (divided by 1).
            div2=0x00000001,     ///<APB clock is the AHB clock divided by 2.
        };
        namespace apbdivValC{
            constexpr MPL::Value<apbdivVal,apbdivVal::div1> div1{};
            constexpr MPL::Value<apbdivVal,apbdivVal::div2> div2{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(16,16),Register::ReadWriteAccess,apbdivVal> apbdiv{}; 
        ///External Clock Edge Select. 
        enum class exteselVal {
            bothEdges=0x00000000,     ///<External clock generated by both rising and falling edges of the external oscillator.
            risingOnly=0x00000001,     ///<External clock generated by only rising edges of the external oscillator.
        };
        namespace exteselValC{
            constexpr MPL::Value<exteselVal,exteselVal::bothEdges> bothEdges{};
            constexpr MPL::Value<exteselVal,exteselVal::risingOnly> risingOnly{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(28,28),Register::ReadWriteAccess,exteselVal> extesel{}; 
        ///Oscillators Busy Flag. 
        enum class obusyfVal {
            notSet=0x00000000,     ///<AHB and APB oscillators are not busy.
            set=0x00000001,     ///<AHB and APB oscillators are busy and the AHBSEL, AHBDIV, and APBDIV fields should not be modified.
        };
        namespace obusyfValC{
            constexpr MPL::Value<obusyfVal,obusyfVal::notSet> notSet{};
            constexpr MPL::Value<obusyfVal,obusyfVal::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(29,29),Register::ReadWriteAccess,obusyfVal> obusyf{}; 
        ///VIORF Clock Enable. 
        enum class viorfclkenVal {
            disabled=0x00000000,     ///<Disable the VIORFCLK input.
            enabled=0x00000001,     ///<Enable the VIORFCLK input.
        };
        namespace viorfclkenValC{
            constexpr MPL::Value<viorfclkenVal,viorfclkenVal::disabled> disabled{};
            constexpr MPL::Value<viorfclkenVal,viorfclkenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(30,30),Register::ReadWriteAccess,viorfclkenVal> viorfclken{}; 
        ///External Clock Input Enable. 
        enum class extoscenVal {
            disabled=0x00000000,     ///<Disable the EXTOSC input.
            enabled=0x00000001,     ///<Enable the EXTOSC input.
        };
        namespace extoscenValC{
            constexpr MPL::Value<extoscenVal,extoscenVal::disabled> disabled{};
            constexpr MPL::Value<extoscenVal,extoscenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(31,31),Register::ReadWriteAccess,extoscenVal> extoscen{}; 
    }
    namespace Noneahbclkg{    ///<AHB Clock Gate
        using Addr = Register::Address<0x4002d010,0xffffffc0,0,unsigned>;
        ///RAM Clock Enable. 
        enum class ramcenVal {
            disabled=0x00000000,     ///<Disable the AHB clock to the RAM.
            enabled=0x00000001,     ///<Enable the AHB clock to the RAM.
        };
        namespace ramcenValC{
            constexpr MPL::Value<ramcenVal,ramcenVal::disabled> disabled{};
            constexpr MPL::Value<ramcenVal,ramcenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,ramcenVal> ramcen{}; 
        ///DMA Clock Enable. 
        enum class dmacenVal {
            disabled=0x00000000,     ///<Disable the AHB clock to the DMA Controller.
            enabled=0x00000001,     ///<Enable the AHB clock to the DMA Controller.
        };
        namespace dmacenValC{
            constexpr MPL::Value<dmacenVal,dmacenVal::disabled> disabled{};
            constexpr MPL::Value<dmacenVal,dmacenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,dmacenVal> dmacen{}; 
        ///Flash Clock Enable. 
        enum class flashcenVal {
            disabled=0x00000000,     ///<Disable the AHB clock to the Flash.
            enabled=0x00000001,     ///<Enable the AHB clock to the Flash.
        };
        namespace flashcenValC{
            constexpr MPL::Value<flashcenVal,flashcenVal::disabled> disabled{};
            constexpr MPL::Value<flashcenVal,flashcenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,flashcenVal> flashcen{}; 
        ///DTM0 Clock Enable. 
        enum class dtm0enVal {
            disabled=0x00000000,     ///<Disable the AHB clock to Data Transfer Manager 0 (DTM0).
            enabled=0x00000001,     ///<Enable the AHB clock to Data Transfer Manager 0 (DTM0).
        };
        namespace dtm0enValC{
            constexpr MPL::Value<dtm0enVal,dtm0enVal::disabled> disabled{};
            constexpr MPL::Value<dtm0enVal,dtm0enVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,dtm0enVal> dtm0en{}; 
        ///DTM1 Clock Enable. 
        enum class dtm1enVal {
            disabled=0x00000000,     ///<Disable the AHB clock to Data Transfer Manager 1 (DTM1).
            enabled=0x00000001,     ///<Enable the AHB clock to Data Transfer Manager 1 (DTM1).
        };
        namespace dtm1enValC{
            constexpr MPL::Value<dtm1enVal,dtm1enVal::disabled> disabled{};
            constexpr MPL::Value<dtm1enVal,dtm1enVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,dtm1enVal> dtm1en{}; 
        ///DTM2 Clock Enable. 
        enum class dtm2enVal {
            disabled=0x00000000,     ///<Disable the AHB clock to Data Transfer Manager 2 (DTM2).
            enabled=0x00000001,     ///<Enable the AHB clock to Data Transfer Manager 2 (DTM2).
        };
        namespace dtm2enValC{
            constexpr MPL::Value<dtm2enVal,dtm2enVal::disabled> disabled{};
            constexpr MPL::Value<dtm2enVal,dtm2enVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,dtm2enVal> dtm2en{}; 
    }
    namespace Noneapbclkg0{    ///<APB Clock Gate 0
        using Addr = Register::Address<0x4002d020,0xfc000000,0,unsigned>;
        ///Flash Controller Clock Enable. 
        enum class flctrlcenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the Flash Controller Module (FLASHCTRL0).
            enabled=0x00000001,     ///<Enable the APB clock to the Flash Controller Module (FLASHCTRL0).
        };
        namespace flctrlcenValC{
            constexpr MPL::Value<flctrlcenVal,flctrlcenVal::disabled> disabled{};
            constexpr MPL::Value<flctrlcenVal,flctrlcenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,flctrlcenVal> flctrlcen{}; 
        ///Port Bank Clock Enable. 
        enum class pb0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the Port Bank Modules.
            enabled=0x00000001,     ///<Enable the APB clock to the Port Bank Modules.
        };
        namespace pb0cenValC{
            constexpr MPL::Value<pb0cenVal,pb0cenVal::disabled> disabled{};
            constexpr MPL::Value<pb0cenVal,pb0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,pb0cenVal> pb0cen{}; 
        ///USART0 Clock Enable. 
        enum class usart0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the USART0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the USART0 Module.
        };
        namespace usart0cenValC{
            constexpr MPL::Value<usart0cenVal,usart0cenVal::disabled> disabled{};
            constexpr MPL::Value<usart0cenVal,usart0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,usart0cenVal> usart0cen{}; 
        ///UART0 Clock Enable. 
        enum class uart0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the UART0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the UART0 Module.
        };
        namespace uart0cenValC{
            constexpr MPL::Value<uart0cenVal,uart0cenVal::disabled> disabled{};
            constexpr MPL::Value<uart0cenVal,uart0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,uart0cenVal> uart0cen{}; 
        ///SPI0 Clock Enable. 
        enum class spi0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the SPI0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the SPI0 Module.
        };
        namespace spi0cenValC{
            constexpr MPL::Value<spi0cenVal,spi0cenVal::disabled> disabled{};
            constexpr MPL::Value<spi0cenVal,spi0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,spi0cenVal> spi0cen{}; 
        ///SPI1 Clock Enable. 
        enum class spi1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the SPI1 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the SPI1 Module.
        };
        namespace spi1cenValC{
            constexpr MPL::Value<spi1cenVal,spi1cenVal::disabled> disabled{};
            constexpr MPL::Value<spi1cenVal,spi1cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,spi1cenVal> spi1cen{}; 
        ///I2C0 Clock Enable. 
        enum class i2c0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the I2C0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the I2C0 Module.
        };
        namespace i2c0cenValC{
            constexpr MPL::Value<i2c0cenVal,i2c0cenVal::disabled> disabled{};
            constexpr MPL::Value<i2c0cenVal,i2c0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,i2c0cenVal> i2c0cen{}; 
        ///EPCA0 Clock Enable. 
        enum class epca0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the EPCA0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the EPCA0 Module.
        };
        namespace epca0cenValC{
            constexpr MPL::Value<epca0cenVal,epca0cenVal::disabled> disabled{};
            constexpr MPL::Value<epca0cenVal,epca0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,epca0cenVal> epca0cen{}; 
        ///TIMER0 Clock Enable. 
        enum class timer0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the TIMER0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the TIMER0 Module.
        };
        namespace timer0cenValC{
            constexpr MPL::Value<timer0cenVal,timer0cenVal::disabled> disabled{};
            constexpr MPL::Value<timer0cenVal,timer0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(8,8),Register::ReadWriteAccess,timer0cenVal> timer0cen{}; 
        ///TIMER1 Clock Enable. 
        enum class timer1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the TIMER1 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the TIMER1 Module.
        };
        namespace timer1cenValC{
            constexpr MPL::Value<timer1cenVal,timer1cenVal::disabled> disabled{};
            constexpr MPL::Value<timer1cenVal,timer1cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(9,9),Register::ReadWriteAccess,timer1cenVal> timer1cen{}; 
        ///TIMER2 Clock Enable. 
        enum class timer2cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the TIMER2 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the TIMER2 Module.
        };
        namespace timer2cenValC{
            constexpr MPL::Value<timer2cenVal,timer2cenVal::disabled> disabled{};
            constexpr MPL::Value<timer2cenVal,timer2cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(10,10),Register::ReadWriteAccess,timer2cenVal> timer2cen{}; 
        ///SARADC0 Clock Enable. 
        enum class adc0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the SARADC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the SARADC0 Module.
        };
        namespace adc0cenValC{
            constexpr MPL::Value<adc0cenVal,adc0cenVal::disabled> disabled{};
            constexpr MPL::Value<adc0cenVal,adc0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(11,11),Register::ReadWriteAccess,adc0cenVal> adc0cen{}; 
        ///CMP0 Clock Enable. 
        enum class cmp0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the Comparator 0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the Comparator 0 Module.
        };
        namespace cmp0cenValC{
            constexpr MPL::Value<cmp0cenVal,cmp0cenVal::disabled> disabled{};
            constexpr MPL::Value<cmp0cenVal,cmp0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(12,12),Register::ReadWriteAccess,cmp0cenVal> cmp0cen{}; 
        ///CMP1 Clock Enable. 
        enum class cmp1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the Comparator 1 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the Comparator 1 Module.
        };
        namespace cmp1cenValC{
            constexpr MPL::Value<cmp1cenVal,cmp1cenVal::disabled> disabled{};
            constexpr MPL::Value<cmp1cenVal,cmp1cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(13,13),Register::ReadWriteAccess,cmp1cenVal> cmp1cen{}; 
        ///AES0 Clock Enable. 
        enum class aes0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the AES0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the AES0 Module.
        };
        namespace aes0cenValC{
            constexpr MPL::Value<aes0cenVal,aes0cenVal::disabled> disabled{};
            constexpr MPL::Value<aes0cenVal,aes0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(14,14),Register::ReadWriteAccess,aes0cenVal> aes0cen{}; 
        ///CRC0 Clock Enable. 
        enum class crc0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the CRC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the CRC0 Module.
        };
        namespace crc0cenValC{
            constexpr MPL::Value<crc0cenVal,crc0cenVal::disabled> disabled{};
            constexpr MPL::Value<crc0cenVal,crc0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(15,15),Register::ReadWriteAccess,crc0cenVal> crc0cen{}; 
        ///IDAC0 Clock Enable. 
        enum class idac0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the IDAC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the IDAC0 Module.
        };
        namespace idac0cenValC{
            constexpr MPL::Value<idac0cenVal,idac0cenVal::disabled> disabled{};
            constexpr MPL::Value<idac0cenVal,idac0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(16,16),Register::ReadWriteAccess,idac0cenVal> idac0cen{}; 
        ///LPT0 Clock Enable. 
        enum class lpt0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the LPTIMER0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the LPTIMER0 Module.
        };
        namespace lpt0cenValC{
            constexpr MPL::Value<lpt0cenVal,lpt0cenVal::disabled> disabled{};
            constexpr MPL::Value<lpt0cenVal,lpt0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(17,17),Register::ReadWriteAccess,lpt0cenVal> lpt0cen{}; 
        ///ACCTR0 Enable. 
        enum class acctr0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the ACCTR0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the ACCTR0 Module.
        };
        namespace acctr0cenValC{
            constexpr MPL::Value<acctr0cenVal,acctr0cenVal::disabled> disabled{};
            constexpr MPL::Value<acctr0cenVal,acctr0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(18,18),Register::ReadWriteAccess,acctr0cenVal> acctr0cen{}; 
        ///DTM0 Clock Enable. 
        enum class dtm0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the DTM0 Register interface.
            enabled=0x00000001,     ///<Enable the APB clock to the DTM0 Register interface.
        };
        namespace dtm0cenValC{
            constexpr MPL::Value<dtm0cenVal,dtm0cenVal::disabled> disabled{};
            constexpr MPL::Value<dtm0cenVal,dtm0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(19,19),Register::ReadWriteAccess,dtm0cenVal> dtm0cen{}; 
        ///DTM1 Clock Enable. 
        enum class dtm1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the DTM1 Register interface.
            enabled=0x00000001,     ///<Enable the APB clock to the DTM1 Register interface.
        };
        namespace dtm1cenValC{
            constexpr MPL::Value<dtm1cenVal,dtm1cenVal::disabled> disabled{};
            constexpr MPL::Value<dtm1cenVal,dtm1cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(20,20),Register::ReadWriteAccess,dtm1cenVal> dtm1cen{}; 
        ///DTM2 Clock Enable. 
        enum class dtm2cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the DTM2 Register interface.
            enabled=0x00000001,     ///<Enable the APB clock to the DTM2 Register interface.
        };
        namespace dtm2cenValC{
            constexpr MPL::Value<dtm2cenVal,dtm2cenVal::disabled> disabled{};
            constexpr MPL::Value<dtm2cenVal,dtm2cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(21,21),Register::ReadWriteAccess,dtm2cenVal> dtm2cen{}; 
        ///LCD0 Clock Enable. 
        enum class lcd0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the LCD0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the LCD0 Module.
        };
        namespace lcd0cenValC{
            constexpr MPL::Value<lcd0cenVal,lcd0cenVal::disabled> disabled{};
            constexpr MPL::Value<lcd0cenVal,lcd0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(22,22),Register::ReadWriteAccess,lcd0cenVal> lcd0cen{}; 
        ///DCDC0 Clock Enable. 
        enum class dcdc0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the DCDC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the DCDC0 Module.
        };
        namespace dcdc0cenValC{
            constexpr MPL::Value<dcdc0cenVal,dcdc0cenVal::disabled> disabled{};
            constexpr MPL::Value<dcdc0cenVal,dcdc0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(23,23),Register::ReadWriteAccess,dcdc0cenVal> dcdc0cen{}; 
        ///ENCDEC0 Clock Enable. 
        enum class encdec0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the ENCDEC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the ENCDEC0 Module.
        };
        namespace encdec0cenValC{
            constexpr MPL::Value<encdec0cenVal,encdec0cenVal::disabled> disabled{};
            constexpr MPL::Value<encdec0cenVal,encdec0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(24,24),Register::ReadWriteAccess,encdec0cenVal> encdec0cen{}; 
        ///PLL0 Clock Enable. 
        enum class pll0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the PLL0 registers.
            enabled=0x00000001,     ///<Enable the APB clock to the PLL0 registers.
        };
        namespace pll0cenValC{
            constexpr MPL::Value<pll0cenVal,pll0cenVal::disabled> disabled{};
            constexpr MPL::Value<pll0cenVal,pll0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(25,25),Register::ReadWriteAccess,pll0cenVal> pll0cen{}; 
    }
    namespace Noneapbclkg1{    ///<APB Clock Gate 1
        using Addr = Register::Address<0x4002d030,0xfffffffc,0,unsigned>;
        ///Miscellaneous 0 Clock Enable. 
        enum class misc0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the VMON0, LDO0, EXTOSC0, LPOSC0, RTC0 and RSTSRC modules.
            enabled=0x00000001,     ///<Enable the APB clock to the VMON0, LDO0, EXTOSC0, LPOSC0, RTC0 and RSTSRC modules.
        };
        namespace misc0cenValC{
            constexpr MPL::Value<misc0cenVal,misc0cenVal::disabled> disabled{};
            constexpr MPL::Value<misc0cenVal,misc0cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,misc0cenVal> misc0cen{}; 
        ///Miscellaneous 1 Clock Enable. 
        enum class misc1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the  Watchdog Timer (WDTIMER0) and DMA Crossbar (DMAXBAR0) modules.
            enabled=0x00000001,     ///<Enable the APB clock to the  Watchdog Timer (WDTIMER0) and DMA Crossbar (DMAXBAR0) modules.
        };
        namespace misc1cenValC{
            constexpr MPL::Value<misc1cenVal,misc1cenVal::disabled> disabled{};
            constexpr MPL::Value<misc1cenVal,misc1cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,misc1cenVal> misc1cen{}; 
    }
    namespace Nonepm3cn{    ///<Power Mode 3 Clock Control
        using Addr = Register::Address<0x4002d040,0xfffefff8,0,unsigned>;
        ///Power Mode 3 Fast-Wake Clock Source. 
        enum class pm3cselVal {
            lposc0Div=0x00000000,     ///<Power Mode 3 clock source is the Low-Power Oscillator.
            lfosc0=0x00000001,     ///<Power Mode 3 clock source is the Low-Frequency Oscillator.
            rtc0tclk=0x00000002,     ///<Power Mode 3 clock source is the RTC0TCLK signal.
            extosc0=0x00000003,     ///<Power Mode 3 clock source is the External Oscillator.
            viorfclk=0x00000004,     ///<Power Mode 3 clock source is the VIORFCLK input pin.
            pll0osc=0x00000005,     ///<Power Mode 3 clock source is the PLL.
            lposc0=0x00000006,     ///<Power Mode 3 clock source is a divided version of the Low-Power Oscillator.
        };
        namespace pm3cselValC{
            constexpr MPL::Value<pm3cselVal,pm3cselVal::lposc0Div> lposc0Div{};
            constexpr MPL::Value<pm3cselVal,pm3cselVal::lfosc0> lfosc0{};
            constexpr MPL::Value<pm3cselVal,pm3cselVal::rtc0tclk> rtc0tclk{};
            constexpr MPL::Value<pm3cselVal,pm3cselVal::extosc0> extosc0{};
            constexpr MPL::Value<pm3cselVal,pm3cselVal::viorfclk> viorfclk{};
            constexpr MPL::Value<pm3cselVal,pm3cselVal::pll0osc> pll0osc{};
            constexpr MPL::Value<pm3cselVal,pm3cselVal::lposc0> lposc0{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(2,0),Register::ReadWriteAccess,pm3cselVal> pm3csel{}; 
        ///Power Mode 3 Fast-Wake Clock Enable. 
        enum class pm3cenVal {
            disabled=0x00000000,     ///<Disable the core clock when in Power Mode 3.
            enabled=0x00000001,     ///<The core clock is enabled and runs off the clock selected by PM3CSEL in Power Mode 3.
        };
        namespace pm3cenValC{
            constexpr MPL::Value<pm3cenVal,pm3cenVal::disabled> disabled{};
            constexpr MPL::Value<pm3cenVal,pm3cenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(16,16),Register::ReadWriteAccess,pm3cenVal> pm3cen{}; 
    }
    namespace Noneconfig{    ///<Configuration Options
        using Addr = Register::Address<0x4002d060,0xfffffffe,0,unsigned>;
        ///Power Mode Select. 
        enum class pmselVal {
            pm8Dis=0x00000000,     ///<Power Mode < PM8.
            pm8En=0x00000001,     ///<Power Mode = PM8.
        };
        namespace pmselValC{
            constexpr MPL::Value<pmselVal,pmselVal::pm8Dis> pm8Dis{};
            constexpr MPL::Value<pmselVal,pmselVal::pm8En> pm8En{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,pmselVal> pmsel{}; 
    }
}
