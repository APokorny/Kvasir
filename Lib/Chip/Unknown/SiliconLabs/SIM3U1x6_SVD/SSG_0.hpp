#pragma once 
#include "Register/Utility.hpp"
namespace Kvasir {
//None
    namespace Noneconfig{    ///<Module Configuration
        using Addr = Register::Address<0x4001e000,0xffff8000,0,unsigned>;
        ///Pulse Generator Counter. 
        constexpr Register::BitLocation<Addr,Register::maskFromRange(11,0),Register::ReadWriteAccess,unsigned> count{}; 
        ///Speed Select. 
        enum class sselVal {
            normal=0x00000000,     ///<The SSG module runs at normal speed, where each pulse and phase cycle consists of 16 ADC clocks.
            double_=0x00000001,     ///<The SSG module runs at double speed, where each pulse and phase cycle consists of 8 ADC clocks.
        };
        namespace sselValC{
            constexpr MPL::Value<sselVal,sselVal::normal> normal{};
            constexpr MPL::Value<sselVal,sselVal::double_> double_{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(12,12),Register::ReadWriteAccess,sselVal> ssel{}; 
        ///Phase Generator Free-Run Enable. 
        enum class phgfrenVal {
            disabled=0x00000000,     ///<The Phase Generator runs only when pulse generation occurs.
            enabled=0x00000001,     ///<The Phase Generator runs when an ADC is enabled, regardless of the Pulse Generator settings.
        };
        namespace phgfrenValC{
            constexpr MPL::Value<phgfrenVal,phgfrenVal::disabled> disabled{};
            constexpr MPL::Value<phgfrenVal,phgfrenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(13,13),Register::ReadWriteAccess,phgfrenVal> phgfren{}; 
        ///Pulse Generator Free-Run Enable. 
        enum class pugfrenVal {
            disabled=0x00000000,     ///<The COUNT field determines the number of pulses generated by the Pulse Generator.
            enabled=0x00000001,     ///<The Pulse Generator always generates pulses regardless of COUNT unless all outputs are disabled (EX0EN, EX1EN, EX2EN, and EX3EN are all 0).
        };
        namespace pugfrenValC{
            constexpr MPL::Value<pugfrenVal,pugfrenVal::disabled> disabled{};
            constexpr MPL::Value<pugfrenVal,pugfrenVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(14,14),Register::ReadWriteAccess,pugfrenVal> pugfren{}; 
    }
    namespace Nonecontrol{    ///<Module Control
        using Addr = Register::Address<0x4001e010,0xfffffe00,0,unsigned>;
        ///Output 0 Invert Enable. 
        enum class ex0invenVal {
            normal=0x00000000,     ///<Do not invert the Pulse Generator output on EX0.
            invert=0x00000001,     ///<Invert the Pulse Generator output on EX0.
        };
        namespace ex0invenValC{
            constexpr MPL::Value<ex0invenVal,ex0invenVal::normal> normal{};
            constexpr MPL::Value<ex0invenVal,ex0invenVal::invert> invert{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,ex0invenVal> ex0inven{}; 
        ///Output 1 Invert Enable. 
        enum class ex1invenVal {
            normal=0x00000000,     ///<Do not invert the Pulse Generator output on EX1.
            invert=0x00000001,     ///<Invert the Pulse Generator output on EX1.
        };
        namespace ex1invenValC{
            constexpr MPL::Value<ex1invenVal,ex1invenVal::normal> normal{};
            constexpr MPL::Value<ex1invenVal,ex1invenVal::invert> invert{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,ex1invenVal> ex1inven{}; 
        ///Output 2 Invert Enable. 
        enum class ex2invenVal {
            normal=0x00000000,     ///<Do not invert the Pulse Generator output on EX2.
            invert=0x00000001,     ///<Invert the Pulse Generator output on EX2.
        };
        namespace ex2invenValC{
            constexpr MPL::Value<ex2invenVal,ex2invenVal::normal> normal{};
            constexpr MPL::Value<ex2invenVal,ex2invenVal::invert> invert{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,ex2invenVal> ex2inven{}; 
        ///Output 3 Invert Enable. 
        enum class ex3invenVal {
            normal=0x00000000,     ///<Do not invert the Pulse Generator output on EX3.
            invert=0x00000001,     ///<Invert the Pulse Generator output on EX3.
        };
        namespace ex3invenValC{
            constexpr MPL::Value<ex3invenVal,ex3invenVal::normal> normal{};
            constexpr MPL::Value<ex3invenVal,ex3invenVal::invert> invert{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,ex3invenVal> ex3inven{}; 
        ///Output 0 Enable. 
        enum class ex0enVal {
            disabled=0x00000000,     ///<Disable the EX0 Pulse Generator output.
            enabled=0x00000001,     ///<Enable the EX0 Pulse Generator output.
        };
        namespace ex0enValC{
            constexpr MPL::Value<ex0enVal,ex0enVal::disabled> disabled{};
            constexpr MPL::Value<ex0enVal,ex0enVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,ex0enVal> ex0en{}; 
        ///Output 1 Enable. 
        enum class ex1enVal {
            disabled=0x00000000,     ///<Disable the EX1 Pulse Generator output.
            enabled=0x00000001,     ///<Enable the EX1 Pulse Generator output.
        };
        namespace ex1enValC{
            constexpr MPL::Value<ex1enVal,ex1enVal::disabled> disabled{};
            constexpr MPL::Value<ex1enVal,ex1enVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,ex1enVal> ex1en{}; 
        ///Output 2 Enable. 
        enum class ex2enVal {
            disabled=0x00000000,     ///<Disable the EX2 Pulse Generator output.
            enabled=0x00000001,     ///<Enable the EX2 Pulse Generator output.
        };
        namespace ex2enValC{
            constexpr MPL::Value<ex2enVal,ex2enVal::disabled> disabled{};
            constexpr MPL::Value<ex2enVal,ex2enVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,ex2enVal> ex2en{}; 
        ///Output 3 Enable. 
        enum class ex3enVal {
            disabled=0x00000000,     ///<Disable the EX3 Pulse Generator output.
            enabled=0x00000001,     ///<Enable the EX3 Pulse Generator output.
        };
        namespace ex3enValC{
            constexpr MPL::Value<ex3enVal,ex3enVal::disabled> disabled{};
            constexpr MPL::Value<ex3enVal,ex3enVal::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,ex3enVal> ex3en{}; 
        ///SSG Module Status. 
        enum class statusVal {
            idle=0x00000000,     ///<The SSG module is idle and the Pulse Generator is not operating.
            active=0x00000001,     ///<The SSG module is active and the Pulse Generator is counting.
        };
        namespace statusValC{
            constexpr MPL::Value<statusVal,statusVal::idle> idle{};
            constexpr MPL::Value<statusVal,statusVal::active> active{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(8,8),Register::ReadWriteAccess,statusVal> status{}; 
    }
}
