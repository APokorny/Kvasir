#pragma once 
#include <Register/Utility.hpp>
namespace Kvasir {
//None
    namespace Ssg0Config{    ///<Module Configuration
        using Addr = Register::Address<0x4001e000,0xffff8000,0x00000000,unsigned>;
        ///Pulse Generator Counter. 
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(11,0),Register::ReadWriteAccess,unsigned> count{}; 
        ///Speed Select. 
        enum class SselVal {
            normal=0x00000000,     ///<The SSG module runs at normal speed, where each pulse and phase cycle consists of 16 ADC clocks.
            double_=0x00000001,     ///<The SSG module runs at double speed, where each pulse and phase cycle consists of 8 ADC clocks.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(12,12),Register::ReadWriteAccess,SselVal> ssel{}; 
        namespace SselValC{
            constexpr Register::FieldValue<decltype(ssel)::Type,SselVal::normal> normal{};
            constexpr Register::FieldValue<decltype(ssel)::Type,SselVal::double_> double_{};
        }
        ///Phase Generator Free-Run Enable. 
        enum class PhgfrenVal {
            disabled=0x00000000,     ///<The Phase Generator runs only when pulse generation occurs.
            enabled=0x00000001,     ///<The Phase Generator runs when an ADC is enabled, regardless of the Pulse Generator settings.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(13,13),Register::ReadWriteAccess,PhgfrenVal> phgfren{}; 
        namespace PhgfrenValC{
            constexpr Register::FieldValue<decltype(phgfren)::Type,PhgfrenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(phgfren)::Type,PhgfrenVal::enabled> enabled{};
        }
        ///Pulse Generator Free-Run Enable. 
        enum class PugfrenVal {
            disabled=0x00000000,     ///<The COUNT field determines the number of pulses generated by the Pulse Generator.
            enabled=0x00000001,     ///<The Pulse Generator always generates pulses regardless of COUNT unless all outputs are disabled (EX0EN, EX1EN, EX2EN, and EX3EN are all 0).
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(14,14),Register::ReadWriteAccess,PugfrenVal> pugfren{}; 
        namespace PugfrenValC{
            constexpr Register::FieldValue<decltype(pugfren)::Type,PugfrenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(pugfren)::Type,PugfrenVal::enabled> enabled{};
        }
    }
    namespace Ssg0Control{    ///<Module Control
        using Addr = Register::Address<0x4001e010,0xfffffe00,0x00000000,unsigned>;
        ///Output 0 Invert Enable. 
        enum class Ex0invenVal {
            normal=0x00000000,     ///<Do not invert the Pulse Generator output on EX0.
            invert=0x00000001,     ///<Invert the Pulse Generator output on EX0.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,Ex0invenVal> ex0inven{}; 
        namespace Ex0invenValC{
            constexpr Register::FieldValue<decltype(ex0inven)::Type,Ex0invenVal::normal> normal{};
            constexpr Register::FieldValue<decltype(ex0inven)::Type,Ex0invenVal::invert> invert{};
        }
        ///Output 1 Invert Enable. 
        enum class Ex1invenVal {
            normal=0x00000000,     ///<Do not invert the Pulse Generator output on EX1.
            invert=0x00000001,     ///<Invert the Pulse Generator output on EX1.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,Ex1invenVal> ex1inven{}; 
        namespace Ex1invenValC{
            constexpr Register::FieldValue<decltype(ex1inven)::Type,Ex1invenVal::normal> normal{};
            constexpr Register::FieldValue<decltype(ex1inven)::Type,Ex1invenVal::invert> invert{};
        }
        ///Output 2 Invert Enable. 
        enum class Ex2invenVal {
            normal=0x00000000,     ///<Do not invert the Pulse Generator output on EX2.
            invert=0x00000001,     ///<Invert the Pulse Generator output on EX2.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,Ex2invenVal> ex2inven{}; 
        namespace Ex2invenValC{
            constexpr Register::FieldValue<decltype(ex2inven)::Type,Ex2invenVal::normal> normal{};
            constexpr Register::FieldValue<decltype(ex2inven)::Type,Ex2invenVal::invert> invert{};
        }
        ///Output 3 Invert Enable. 
        enum class Ex3invenVal {
            normal=0x00000000,     ///<Do not invert the Pulse Generator output on EX3.
            invert=0x00000001,     ///<Invert the Pulse Generator output on EX3.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,Ex3invenVal> ex3inven{}; 
        namespace Ex3invenValC{
            constexpr Register::FieldValue<decltype(ex3inven)::Type,Ex3invenVal::normal> normal{};
            constexpr Register::FieldValue<decltype(ex3inven)::Type,Ex3invenVal::invert> invert{};
        }
        ///Output 0 Enable. 
        enum class Ex0enVal {
            disabled=0x00000000,     ///<Disable the EX0 Pulse Generator output.
            enabled=0x00000001,     ///<Enable the EX0 Pulse Generator output.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,Ex0enVal> ex0en{}; 
        namespace Ex0enValC{
            constexpr Register::FieldValue<decltype(ex0en)::Type,Ex0enVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(ex0en)::Type,Ex0enVal::enabled> enabled{};
        }
        ///Output 1 Enable. 
        enum class Ex1enVal {
            disabled=0x00000000,     ///<Disable the EX1 Pulse Generator output.
            enabled=0x00000001,     ///<Enable the EX1 Pulse Generator output.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,Ex1enVal> ex1en{}; 
        namespace Ex1enValC{
            constexpr Register::FieldValue<decltype(ex1en)::Type,Ex1enVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(ex1en)::Type,Ex1enVal::enabled> enabled{};
        }
        ///Output 2 Enable. 
        enum class Ex2enVal {
            disabled=0x00000000,     ///<Disable the EX2 Pulse Generator output.
            enabled=0x00000001,     ///<Enable the EX2 Pulse Generator output.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,Ex2enVal> ex2en{}; 
        namespace Ex2enValC{
            constexpr Register::FieldValue<decltype(ex2en)::Type,Ex2enVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(ex2en)::Type,Ex2enVal::enabled> enabled{};
        }
        ///Output 3 Enable. 
        enum class Ex3enVal {
            disabled=0x00000000,     ///<Disable the EX3 Pulse Generator output.
            enabled=0x00000001,     ///<Enable the EX3 Pulse Generator output.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,Ex3enVal> ex3en{}; 
        namespace Ex3enValC{
            constexpr Register::FieldValue<decltype(ex3en)::Type,Ex3enVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(ex3en)::Type,Ex3enVal::enabled> enabled{};
        }
        ///SSG Module Status. 
        enum class StatusVal {
            idle=0x00000000,     ///<The SSG module is idle and the Pulse Generator is not operating.
            active=0x00000001,     ///<The SSG module is active and the Pulse Generator is counting.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(8,8),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,StatusVal> status{}; 
        namespace StatusValC{
            constexpr Register::FieldValue<decltype(status)::Type,StatusVal::idle> idle{};
            constexpr Register::FieldValue<decltype(status)::Type,StatusVal::active> active{};
        }
    }
}
