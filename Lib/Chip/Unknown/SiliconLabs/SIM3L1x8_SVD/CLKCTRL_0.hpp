#pragma once 
#include "Register/Utility.hpp"
namespace Kvasir {
//None
    namespace Nonecontrol{    ///<Module Control
        using Addr = Register::Address<0x4002d000,0x0ffef8f8,0,unsigned>;
        ///AHB Clock Source Select. 
        enum class AhbselVal {
            lposc0=0x00000000,     ///<AHB clock source is the Low-Power Oscillator.
            lfosc0=0x00000001,     ///<AHB clock source is the Low-Frequency Oscillator.
            rtc0tclk=0x00000002,     ///<AHB clock source is the RTC0TCLK signal.
            extosc0=0x00000003,     ///<AHB clock source is the External Oscillator.
            viorfclk=0x00000004,     ///<AHB clock source is the VIORFCLK input pin.
            pll0osc=0x00000005,     ///<AHB clock source is the PLL.
            lposc0Div=0x00000006,     ///<AHB clock source is a divided version of the Low-Power Oscillator.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,0),Register::ReadWriteAccess,AhbselVal> ahbsel{}; 
        namespace AhbselValC{
            constexpr Register::FieldValue<decltype(ahbsel)::Type,AhbselVal::lposc0> lposc0{};
            constexpr Register::FieldValue<decltype(ahbsel)::Type,AhbselVal::lfosc0> lfosc0{};
            constexpr Register::FieldValue<decltype(ahbsel)::Type,AhbselVal::rtc0tclk> rtc0tclk{};
            constexpr Register::FieldValue<decltype(ahbsel)::Type,AhbselVal::extosc0> extosc0{};
            constexpr Register::FieldValue<decltype(ahbsel)::Type,AhbselVal::viorfclk> viorfclk{};
            constexpr Register::FieldValue<decltype(ahbsel)::Type,AhbselVal::pll0osc> pll0osc{};
            constexpr Register::FieldValue<decltype(ahbsel)::Type,AhbselVal::lposc0Div> lposc0Div{};
        }
        ///AHB Clock Divider. 
        enum class AhbdivVal {
            div1=0x00000000,     ///<AHB clock divided by 1.
            div2=0x00000001,     ///<AHB clock divided by 2.
            div4=0x00000002,     ///<AHB clock divided by 4.
            div8=0x00000003,     ///<AHB clock divided by 8.
            div16=0x00000004,     ///<AHB clock divided by 16.
            div32=0x00000005,     ///<AHB clock divided by 32.
            div64=0x00000006,     ///<AHB clock divided by 64.
            div128=0x00000007,     ///<AHB clock divided by 128.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(10,8),Register::ReadWriteAccess,AhbdivVal> ahbdiv{}; 
        namespace AhbdivValC{
            constexpr Register::FieldValue<decltype(ahbdiv)::Type,AhbdivVal::div1> div1{};
            constexpr Register::FieldValue<decltype(ahbdiv)::Type,AhbdivVal::div2> div2{};
            constexpr Register::FieldValue<decltype(ahbdiv)::Type,AhbdivVal::div4> div4{};
            constexpr Register::FieldValue<decltype(ahbdiv)::Type,AhbdivVal::div8> div8{};
            constexpr Register::FieldValue<decltype(ahbdiv)::Type,AhbdivVal::div16> div16{};
            constexpr Register::FieldValue<decltype(ahbdiv)::Type,AhbdivVal::div32> div32{};
            constexpr Register::FieldValue<decltype(ahbdiv)::Type,AhbdivVal::div64> div64{};
            constexpr Register::FieldValue<decltype(ahbdiv)::Type,AhbdivVal::div128> div128{};
        }
        ///APB Clock Divider. 
        enum class ApbdivVal {
            div1=0x00000000,     ///<APB clock is the same as the AHB clock (divided by 1).
            div2=0x00000001,     ///<APB clock is the AHB clock divided by 2.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(16,16),Register::ReadWriteAccess,ApbdivVal> apbdiv{}; 
        namespace ApbdivValC{
            constexpr Register::FieldValue<decltype(apbdiv)::Type,ApbdivVal::div1> div1{};
            constexpr Register::FieldValue<decltype(apbdiv)::Type,ApbdivVal::div2> div2{};
        }
        ///External Clock Edge Select. 
        enum class ExteselVal {
            bothEdges=0x00000000,     ///<External clock generated by both rising and falling edges of the external oscillator.
            risingOnly=0x00000001,     ///<External clock generated by only rising edges of the external oscillator.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(28,28),Register::ReadWriteAccess,ExteselVal> extesel{}; 
        namespace ExteselValC{
            constexpr Register::FieldValue<decltype(extesel)::Type,ExteselVal::bothEdges> bothEdges{};
            constexpr Register::FieldValue<decltype(extesel)::Type,ExteselVal::risingOnly> risingOnly{};
        }
        ///Oscillators Busy Flag. 
        enum class ObusyfVal {
            notSet=0x00000000,     ///<AHB and APB oscillators are not busy.
            set=0x00000001,     ///<AHB and APB oscillators are busy and the AHBSEL, AHBDIV, and APBDIV fields should not be modified.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(29,29),Register::ReadWriteAccess,ObusyfVal> obusyf{}; 
        namespace ObusyfValC{
            constexpr Register::FieldValue<decltype(obusyf)::Type,ObusyfVal::notSet> notSet{};
            constexpr Register::FieldValue<decltype(obusyf)::Type,ObusyfVal::set> set{};
        }
        ///VIORF Clock Enable. 
        enum class ViorfclkenVal {
            disabled=0x00000000,     ///<Disable the VIORFCLK input.
            enabled=0x00000001,     ///<Enable the VIORFCLK input.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(30,30),Register::ReadWriteAccess,ViorfclkenVal> viorfclken{}; 
        namespace ViorfclkenValC{
            constexpr Register::FieldValue<decltype(viorfclken)::Type,ViorfclkenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(viorfclken)::Type,ViorfclkenVal::enabled> enabled{};
        }
        ///RTC Timer Clock Enable. 
        enum class Rtc0tclkenVal {
            disabled=0x00000000,     ///<Disable the RTC0TCLK input.
            enabled=0x00000001,     ///<Enable the RTC0TCLK input.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(31,31),Register::ReadWriteAccess,Rtc0tclkenVal> rtc0tclken{}; 
        namespace Rtc0tclkenValC{
            constexpr Register::FieldValue<decltype(rtc0tclken)::Type,Rtc0tclkenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(rtc0tclken)::Type,Rtc0tclkenVal::enabled> enabled{};
        }
    }
    namespace Noneahbclkg{    ///<AHB Clock Gate
        using Addr = Register::Address<0x4002d010,0xffffffc0,0,unsigned>;
        ///RAM Clock Enable. 
        enum class RamcenVal {
            disabled=0x00000000,     ///<Disable the AHB clock to the RAM.
            enabled=0x00000001,     ///<Enable the AHB clock to the RAM.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,RamcenVal> ramcen{}; 
        namespace RamcenValC{
            constexpr Register::FieldValue<decltype(ramcen)::Type,RamcenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(ramcen)::Type,RamcenVal::enabled> enabled{};
        }
        ///DMA Clock Enable. 
        enum class DmacenVal {
            disabled=0x00000000,     ///<Disable the AHB clock to the DMA Controller.
            enabled=0x00000001,     ///<Enable the AHB clock to the DMA Controller.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,DmacenVal> dmacen{}; 
        namespace DmacenValC{
            constexpr Register::FieldValue<decltype(dmacen)::Type,DmacenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(dmacen)::Type,DmacenVal::enabled> enabled{};
        }
        ///Flash Clock Enable. 
        enum class FlashcenVal {
            disabled=0x00000000,     ///<Disable the AHB clock to the Flash.
            enabled=0x00000001,     ///<Enable the AHB clock to the Flash.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,FlashcenVal> flashcen{}; 
        namespace FlashcenValC{
            constexpr Register::FieldValue<decltype(flashcen)::Type,FlashcenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(flashcen)::Type,FlashcenVal::enabled> enabled{};
        }
        ///DTM0 Clock Enable. 
        enum class Dtm0enVal {
            disabled=0x00000000,     ///<Disable the AHB clock to Data Transfer Manager 0 (DTM0).
            enabled=0x00000001,     ///<Enable the AHB clock to Data Transfer Manager 0 (DTM0).
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,Dtm0enVal> dtm0en{}; 
        namespace Dtm0enValC{
            constexpr Register::FieldValue<decltype(dtm0en)::Type,Dtm0enVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(dtm0en)::Type,Dtm0enVal::enabled> enabled{};
        }
        ///DTM1 Clock Enable. 
        enum class Dtm1enVal {
            disabled=0x00000000,     ///<Disable the AHB clock to Data Transfer Manager 1 (DTM1).
            enabled=0x00000001,     ///<Enable the AHB clock to Data Transfer Manager 1 (DTM1).
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,Dtm1enVal> dtm1en{}; 
        namespace Dtm1enValC{
            constexpr Register::FieldValue<decltype(dtm1en)::Type,Dtm1enVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(dtm1en)::Type,Dtm1enVal::enabled> enabled{};
        }
        ///DTM2 Clock Enable. 
        enum class Dtm2enVal {
            disabled=0x00000000,     ///<Disable the AHB clock to Data Transfer Manager 2 (DTM2).
            enabled=0x00000001,     ///<Enable the AHB clock to Data Transfer Manager 2 (DTM2).
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,Dtm2enVal> dtm2en{}; 
        namespace Dtm2enValC{
            constexpr Register::FieldValue<decltype(dtm2en)::Type,Dtm2enVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(dtm2en)::Type,Dtm2enVal::enabled> enabled{};
        }
    }
    namespace Noneapbclkg0{    ///<APB Clock Gate 0
        using Addr = Register::Address<0x4002d020,0xfc000000,0,unsigned>;
        ///Flash Controller Clock Enable. 
        enum class FlctrlcenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the Flash Controller Module (FLASHCTRL0).
            enabled=0x00000001,     ///<Enable the APB clock to the Flash Controller Module (FLASHCTRL0).
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,FlctrlcenVal> flctrlcen{}; 
        namespace FlctrlcenValC{
            constexpr Register::FieldValue<decltype(flctrlcen)::Type,FlctrlcenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(flctrlcen)::Type,FlctrlcenVal::enabled> enabled{};
        }
        ///Port Bank Clock Enable. 
        enum class Pb0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the Port Bank Modules.
            enabled=0x00000001,     ///<Enable the APB clock to the Port Bank Modules.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,Pb0cenVal> pb0cen{}; 
        namespace Pb0cenValC{
            constexpr Register::FieldValue<decltype(pb0cen)::Type,Pb0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(pb0cen)::Type,Pb0cenVal::enabled> enabled{};
        }
        ///USART0 Clock Enable. 
        enum class Usart0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the USART0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the USART0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,Usart0cenVal> usart0cen{}; 
        namespace Usart0cenValC{
            constexpr Register::FieldValue<decltype(usart0cen)::Type,Usart0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(usart0cen)::Type,Usart0cenVal::enabled> enabled{};
        }
        ///UART0 Clock Enable. 
        enum class Uart0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the UART0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the UART0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,Uart0cenVal> uart0cen{}; 
        namespace Uart0cenValC{
            constexpr Register::FieldValue<decltype(uart0cen)::Type,Uart0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(uart0cen)::Type,Uart0cenVal::enabled> enabled{};
        }
        ///SPI0 Clock Enable. 
        enum class Spi0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the SPI0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the SPI0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,Spi0cenVal> spi0cen{}; 
        namespace Spi0cenValC{
            constexpr Register::FieldValue<decltype(spi0cen)::Type,Spi0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(spi0cen)::Type,Spi0cenVal::enabled> enabled{};
        }
        ///SPI1 Clock Enable. 
        enum class Spi1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the SPI1 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the SPI1 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,Spi1cenVal> spi1cen{}; 
        namespace Spi1cenValC{
            constexpr Register::FieldValue<decltype(spi1cen)::Type,Spi1cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(spi1cen)::Type,Spi1cenVal::enabled> enabled{};
        }
        ///I2C0 Clock Enable. 
        enum class I2c0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the I2C0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the I2C0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,I2c0cenVal> i2c0cen{}; 
        namespace I2c0cenValC{
            constexpr Register::FieldValue<decltype(i2c0cen)::Type,I2c0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(i2c0cen)::Type,I2c0cenVal::enabled> enabled{};
        }
        ///EPCA0 Clock Enable. 
        enum class Epca0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the EPCA0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the EPCA0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,Epca0cenVal> epca0cen{}; 
        namespace Epca0cenValC{
            constexpr Register::FieldValue<decltype(epca0cen)::Type,Epca0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(epca0cen)::Type,Epca0cenVal::enabled> enabled{};
        }
        ///TIMER0 Clock Enable. 
        enum class Timer0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the TIMER0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the TIMER0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(8,8),Register::ReadWriteAccess,Timer0cenVal> timer0cen{}; 
        namespace Timer0cenValC{
            constexpr Register::FieldValue<decltype(timer0cen)::Type,Timer0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(timer0cen)::Type,Timer0cenVal::enabled> enabled{};
        }
        ///TIMER1 Clock Enable. 
        enum class Timer1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the TIMER1 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the TIMER1 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(9,9),Register::ReadWriteAccess,Timer1cenVal> timer1cen{}; 
        namespace Timer1cenValC{
            constexpr Register::FieldValue<decltype(timer1cen)::Type,Timer1cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(timer1cen)::Type,Timer1cenVal::enabled> enabled{};
        }
        ///TIMER2 Clock Enable. 
        enum class Timer2cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the TIMER2 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the TIMER2 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(10,10),Register::ReadWriteAccess,Timer2cenVal> timer2cen{}; 
        namespace Timer2cenValC{
            constexpr Register::FieldValue<decltype(timer2cen)::Type,Timer2cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(timer2cen)::Type,Timer2cenVal::enabled> enabled{};
        }
        ///SARADC0 Clock Enable. 
        enum class Adc0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the SARADC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the SARADC0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(11,11),Register::ReadWriteAccess,Adc0cenVal> adc0cen{}; 
        namespace Adc0cenValC{
            constexpr Register::FieldValue<decltype(adc0cen)::Type,Adc0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(adc0cen)::Type,Adc0cenVal::enabled> enabled{};
        }
        ///CMP0 Clock Enable. 
        enum class Cmp0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the Comparator 0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the Comparator 0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(12,12),Register::ReadWriteAccess,Cmp0cenVal> cmp0cen{}; 
        namespace Cmp0cenValC{
            constexpr Register::FieldValue<decltype(cmp0cen)::Type,Cmp0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(cmp0cen)::Type,Cmp0cenVal::enabled> enabled{};
        }
        ///CMP1 Clock Enable. 
        enum class Cmp1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the Comparator 1 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the Comparator 1 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(13,13),Register::ReadWriteAccess,Cmp1cenVal> cmp1cen{}; 
        namespace Cmp1cenValC{
            constexpr Register::FieldValue<decltype(cmp1cen)::Type,Cmp1cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(cmp1cen)::Type,Cmp1cenVal::enabled> enabled{};
        }
        ///AES0 Clock Enable. 
        enum class Aes0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the AES0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the AES0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(14,14),Register::ReadWriteAccess,Aes0cenVal> aes0cen{}; 
        namespace Aes0cenValC{
            constexpr Register::FieldValue<decltype(aes0cen)::Type,Aes0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(aes0cen)::Type,Aes0cenVal::enabled> enabled{};
        }
        ///CRC0 Clock Enable. 
        enum class Crc0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the CRC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the CRC0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(15,15),Register::ReadWriteAccess,Crc0cenVal> crc0cen{}; 
        namespace Crc0cenValC{
            constexpr Register::FieldValue<decltype(crc0cen)::Type,Crc0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(crc0cen)::Type,Crc0cenVal::enabled> enabled{};
        }
        ///IDAC0 Clock Enable. 
        enum class Idac0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the IDAC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the IDAC0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(16,16),Register::ReadWriteAccess,Idac0cenVal> idac0cen{}; 
        namespace Idac0cenValC{
            constexpr Register::FieldValue<decltype(idac0cen)::Type,Idac0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(idac0cen)::Type,Idac0cenVal::enabled> enabled{};
        }
        ///LPT0 Clock Enable. 
        enum class Lpt0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the LPTIMER0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the LPTIMER0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(17,17),Register::ReadWriteAccess,Lpt0cenVal> lpt0cen{}; 
        namespace Lpt0cenValC{
            constexpr Register::FieldValue<decltype(lpt0cen)::Type,Lpt0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(lpt0cen)::Type,Lpt0cenVal::enabled> enabled{};
        }
        ///ACCTR0 Enable. 
        enum class Acctr0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the ACCTR0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the ACCTR0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(18,18),Register::ReadWriteAccess,Acctr0cenVal> acctr0cen{}; 
        namespace Acctr0cenValC{
            constexpr Register::FieldValue<decltype(acctr0cen)::Type,Acctr0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(acctr0cen)::Type,Acctr0cenVal::enabled> enabled{};
        }
        ///DTM0 Clock Enable. 
        enum class Dtm0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the DTM0 Register interface.
            enabled=0x00000001,     ///<Enable the APB clock to the DTM0 Register interface.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(19,19),Register::ReadWriteAccess,Dtm0cenVal> dtm0cen{}; 
        namespace Dtm0cenValC{
            constexpr Register::FieldValue<decltype(dtm0cen)::Type,Dtm0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(dtm0cen)::Type,Dtm0cenVal::enabled> enabled{};
        }
        ///DTM1 Clock Enable. 
        enum class Dtm1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the DTM1 Register interface.
            enabled=0x00000001,     ///<Enable the APB clock to the DTM1 Register interface.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(20,20),Register::ReadWriteAccess,Dtm1cenVal> dtm1cen{}; 
        namespace Dtm1cenValC{
            constexpr Register::FieldValue<decltype(dtm1cen)::Type,Dtm1cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(dtm1cen)::Type,Dtm1cenVal::enabled> enabled{};
        }
        ///DTM2 Clock Enable. 
        enum class Dtm2cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the DTM2 Register interface.
            enabled=0x00000001,     ///<Enable the APB clock to the DTM2 Register interface.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(21,21),Register::ReadWriteAccess,Dtm2cenVal> dtm2cen{}; 
        namespace Dtm2cenValC{
            constexpr Register::FieldValue<decltype(dtm2cen)::Type,Dtm2cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(dtm2cen)::Type,Dtm2cenVal::enabled> enabled{};
        }
        ///LCD0 Clock Enable. 
        enum class Lcd0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the LCD0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the LCD0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(22,22),Register::ReadWriteAccess,Lcd0cenVal> lcd0cen{}; 
        namespace Lcd0cenValC{
            constexpr Register::FieldValue<decltype(lcd0cen)::Type,Lcd0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(lcd0cen)::Type,Lcd0cenVal::enabled> enabled{};
        }
        ///DCDC0 Clock Enable. 
        enum class Dcdc0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the DCDC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the DCDC0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(23,23),Register::ReadWriteAccess,Dcdc0cenVal> dcdc0cen{}; 
        namespace Dcdc0cenValC{
            constexpr Register::FieldValue<decltype(dcdc0cen)::Type,Dcdc0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(dcdc0cen)::Type,Dcdc0cenVal::enabled> enabled{};
        }
        ///ENCDEC0 Clock Enable. 
        enum class Encdec0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the ENCDEC0 Module.
            enabled=0x00000001,     ///<Enable the APB clock to the ENCDEC0 Module.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(24,24),Register::ReadWriteAccess,Encdec0cenVal> encdec0cen{}; 
        namespace Encdec0cenValC{
            constexpr Register::FieldValue<decltype(encdec0cen)::Type,Encdec0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(encdec0cen)::Type,Encdec0cenVal::enabled> enabled{};
        }
        ///PLL0 Clock Enable. 
        enum class Pll0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the PLL0 registers.
            enabled=0x00000001,     ///<Enable the APB clock to the PLL0 registers.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(25,25),Register::ReadWriteAccess,Pll0cenVal> pll0cen{}; 
        namespace Pll0cenValC{
            constexpr Register::FieldValue<decltype(pll0cen)::Type,Pll0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(pll0cen)::Type,Pll0cenVal::enabled> enabled{};
        }
    }
    namespace Noneapbclkg1{    ///<APB Clock Gate 1
        using Addr = Register::Address<0x4002d030,0xfffffffc,0,unsigned>;
        ///Miscellaneous 0 Clock Enable. 
        enum class Misc0cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the VMON0, LDO0, EXTOSC0, LPOSC0, RTC0 and RSTSRC modules.
            enabled=0x00000001,     ///<Enable the APB clock to the VMON0, LDO0, EXTOSC0, LPOSC0, RTC0 and RSTSRC modules.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,Misc0cenVal> misc0cen{}; 
        namespace Misc0cenValC{
            constexpr Register::FieldValue<decltype(misc0cen)::Type,Misc0cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(misc0cen)::Type,Misc0cenVal::enabled> enabled{};
        }
        ///Miscellaneous 1 Clock Enable. 
        enum class Misc1cenVal {
            disabled=0x00000000,     ///<Disable the APB clock to the  Watchdog Timer (WDTIMER0) and DMA Crossbar (DMAXBAR0) modules.
            enabled=0x00000001,     ///<Enable the APB clock to the  Watchdog Timer (WDTIMER0) and DMA Crossbar (DMAXBAR0) modules.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,Misc1cenVal> misc1cen{}; 
        namespace Misc1cenValC{
            constexpr Register::FieldValue<decltype(misc1cen)::Type,Misc1cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(misc1cen)::Type,Misc1cenVal::enabled> enabled{};
        }
    }
    namespace Nonepm3cn{    ///<Power Mode 3 Clock Control
        using Addr = Register::Address<0x4002d040,0xfffefff8,0,unsigned>;
        ///Power Mode 3 Fast-Wake Clock Source. 
        enum class Pm3cselVal {
            lposc0Div=0x00000000,     ///<Power Mode 3 clock source is the Low-Power Oscillator.
            lfosc0=0x00000001,     ///<Power Mode 3 clock source is the Low-Frequency Oscillator.
            rtc0tclk=0x00000002,     ///<Power Mode 3 clock source is the RTC0TCLK signal.
            extosc0=0x00000003,     ///<Power Mode 3 clock source is the External Oscillator.
            viorfclk=0x00000004,     ///<Power Mode 3 clock source is the VIORFCLK input pin.
            pll0osc=0x00000005,     ///<Power Mode 3 clock source is the PLL.
            lposc0=0x00000006,     ///<Power Mode 3 clock source is a divided version of the Low-Power Oscillator.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,0),Register::ReadWriteAccess,Pm3cselVal> pm3csel{}; 
        namespace Pm3cselValC{
            constexpr Register::FieldValue<decltype(pm3csel)::Type,Pm3cselVal::lposc0Div> lposc0Div{};
            constexpr Register::FieldValue<decltype(pm3csel)::Type,Pm3cselVal::lfosc0> lfosc0{};
            constexpr Register::FieldValue<decltype(pm3csel)::Type,Pm3cselVal::rtc0tclk> rtc0tclk{};
            constexpr Register::FieldValue<decltype(pm3csel)::Type,Pm3cselVal::extosc0> extosc0{};
            constexpr Register::FieldValue<decltype(pm3csel)::Type,Pm3cselVal::viorfclk> viorfclk{};
            constexpr Register::FieldValue<decltype(pm3csel)::Type,Pm3cselVal::pll0osc> pll0osc{};
            constexpr Register::FieldValue<decltype(pm3csel)::Type,Pm3cselVal::lposc0> lposc0{};
        }
        ///Power Mode 3 Fast-Wake Clock Enable. 
        enum class Pm3cenVal {
            disabled=0x00000000,     ///<Disable the core clock when in Power Mode 3.
            enabled=0x00000001,     ///<The core clock is enabled and runs off the clock selected by PM3CSEL in Power Mode 3.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(16,16),Register::ReadWriteAccess,Pm3cenVal> pm3cen{}; 
        namespace Pm3cenValC{
            constexpr Register::FieldValue<decltype(pm3cen)::Type,Pm3cenVal::disabled> disabled{};
            constexpr Register::FieldValue<decltype(pm3cen)::Type,Pm3cenVal::enabled> enabled{};
        }
    }
    namespace Noneconfig{    ///<Configuration Options
        using Addr = Register::Address<0x4002d060,0xfffffffe,0,unsigned>;
        ///Power Mode Select. 
        enum class PmselVal {
            pm8Dis=0x00000000,     ///<Power Mode < PM8.
            pm8En=0x00000001,     ///<Power Mode = PM8.
        };
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,PmselVal> pmsel{}; 
        namespace PmselValC{
            constexpr Register::FieldValue<decltype(pmsel)::Type,PmselVal::pm8Dis> pm8Dis{};
            constexpr Register::FieldValue<decltype(pmsel)::Type,PmselVal::pm8En> pm8En{};
        }
    }
}
