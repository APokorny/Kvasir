#pragma once 
#include <Register/Utility.hpp>
namespace Kvasir {
//Registers group
    namespace Gp0Pmd{    ///<Bit Mode Control
        using Addr = Register::Address<0x50004000,0xffff0000,0x00000000,unsigned>;
        ///P0 I/O Pin[0] Mode ControlDetermine each I/O type of P0 pins00 = P0[0] pin is in INPUT mode.01 = P0[0] pin is in OUTPUT mode.10 = P0[0] pin is in Open-Drain mode.11 = P0[0] pin is in Quasi-bidirectional mode.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,0),Register::ReadWriteAccess,unsigned> pmd0{}; 
        ///P0 I/O Pin[1] Mode ControlDetermine each I/O type of P0 pins00 = P0[1] pin is in INPUT mode.01 = P0[1] pin is in OUTPUT mode.10 = P0[1] pin is in Open-Drain mode.11 = P0[1] pin is in Quasi-bidirectional mode.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,2),Register::ReadWriteAccess,unsigned> pmd1{}; 
        ///P0 I/O Pin[2] Mode ControlDetermine each I/O type of P0 pins00 = P0[2] pin is in INPUT mode.01 = P0[2] pin is in OUTPUT mode.10 = P0[2] pin is in Open-Drain mode.11 = P0[2] pin is in Quasi-bidirectional mode.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,4),Register::ReadWriteAccess,unsigned> pmd2{}; 
        ///P0 I/O Pin[3] Mode ControlDetermine each I/O type of P0 pins00 = P0[3] pin is in INPUT mode.01 = P0[3] pin is in OUTPUT mode.10 = P0[3] pin is in Open-Drain mode.11 = P0[3] pin is in Quasi-bidirectional mode.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,6),Register::ReadWriteAccess,unsigned> pmd3{}; 
        ///P0 I/O Pin[4] Mode ControlDetermine each I/O type of P0 pins00 = P0[4] pin is in INPUT mode.01 = P0[4] pin is in OUTPUT mode.10 = P0[4] pin is in Open-Drain mode.11 = P0[4] pin is in Quasi-bidirectional mode.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(9,8),Register::ReadWriteAccess,unsigned> pmd4{}; 
        ///P0 I/O Pin[5] Mode ControlDetermine each I/O type of P0 pins00 = P0[5] pin is in INPUT mode.01 = P0[5] pin is in OUTPUT mode.10 = P0[5] pin is in Open-Drain mode.11 = P0[5] pin is in Quasi-bidirectional mode.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(11,10),Register::ReadWriteAccess,unsigned> pmd5{}; 
        ///P0 I/O Pin[6] Mode ControlDetermine each I/O type of P0 pins00 = P0[6] pin is in INPUT mode.01 = P0[6] pin is in OUTPUT mode.10 = P0[6] pin is in Open-Drain mode.11 = P0[6] pin is in Quasi-bidirectional mode.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(13,12),Register::ReadWriteAccess,unsigned> pmd6{}; 
        ///P0 I/O Pin[7] Mode ControlDetermine each I/O type of P0 pins00 = P0[7] pin is in INPUT mode.01 = P0[7] pin is in OUTPUT mode.10 = P0[7] pin is in Open-Drain mode.11 = P0[7] pin is in Quasi-bidirectional mode.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(15,14),Register::ReadWriteAccess,unsigned> pmd7{}; 
    }
    namespace Gp0Offd{    ///<Bit OFF Digital Enable
        using Addr = Register::Address<0x50004004,0xff00ffff,0x00000000,unsigned>;
        ///OFFD: P0 Pin OFF digital input path Enable1 = Disable IO digital input path (digital input tied to low)0 = Enable IO digital input path
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(23,16),Register::ReadWriteAccess,unsigned> offd{}; 
    }
    namespace Gp0Dout{    ///<Data Output Value
        using Addr = Register::Address<0x50004008,0xffffff00,0x00000000,unsigned>;
        ///P0 Pin[0] Output ValueEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.1 = P0 Pin[0] will drive High if the corresponding output mode enabling bit is set.0 = P0 Pin[0] will drive Low if the corresponding output mode enabling bit is set.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,unsigned> dout0{}; 
        ///P0 Pin[1] Output ValueEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.1 = P0 Pin[1] will drive High if the corresponding output mode enabling bit is set.0 = P0 Pin[1] will drive Low if the corresponding output mode enabling bit is set.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,unsigned> dout1{}; 
        ///P0 Pin[2] Output ValueEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.1 = P0 Pin[2] will drive High if the corresponding output mode enabling bit is set.0 = P0 Pin[2] will drive Low if the corresponding output mode enabling bit is set.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,unsigned> dout2{}; 
        ///P0 Pin[3] Output ValueEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.1 = P0 Pin[3] will drive High if the corresponding output mode enabling bit is set.0 = P0 Pin[3] will drive Low if the corresponding output mode enabling bit is set.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,unsigned> dout3{}; 
        ///P0 Pin[4] Output ValueEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.1 = P0 Pin[4] will drive High if the corresponding output mode enabling bit is set.0 = P0 Pin[4] will drive Low if the corresponding output mode enabling bit is set.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,unsigned> dout4{}; 
        ///P0 Pin[5] Output ValueEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.1 = P0 Pin[5] will drive High if the corresponding output mode enabling bit is set.0 = P0 Pin[5] will drive Low if the corresponding output mode enabling bit is set.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,unsigned> dout5{}; 
        ///P0 Pin[6] Output ValueEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.1 = P0 Pin[6] will drive High if the corresponding output mode enabling bit is set.0 = P0 Pin[6] will drive Low if the corresponding output mode enabling bit is set.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,unsigned> dout6{}; 
        ///P0 Pin[7] Output ValueEach of these bits control the status of a P0 pin when the P0 pin is configures as output, open-drain and quasi-mode.1 = P0 Pin[7] will drive High if the corresponding output mode enabling bit is set.0 = P0 Pin[7] will drive Low if the corresponding output mode enabling bit is set.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,unsigned> dout7{}; 
    }
    namespace Gp0Dmask{    ///<Data Output Write Mask
        using Addr = Register::Address<0x5000400c,0xffffff00,0x00000000,unsigned>;
        ///P0 Data Output Write MaskThese bits are used to protect the corresponding register of P0_DOUT bit[0]. When set the DMASK bit[0] to "1", the corresponding DOUT0 bit is protected. The write signal is masked, write data to the protect bit is ignored0 = The corresponding P0_DOUT[0] bit can be updated1 = The corresponding P0_DOUT[0] bit is protected
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,unsigned> dmask0{}; 
        ///P0 Data Output Write MaskThese bits are used to protect the corresponding register of P0_DOUT bit[1]. When set the DMASK bit[1] to "1", the corresponding DOUT1 bit is protected. The write signal is masked, write data to the protect bit is ignored0 = The corresponding P0_DOUT[1] bit can be updated1 = The corresponding P0_DOUT[1] bit is protected
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,unsigned> dmask1{}; 
        ///P0 Data Output Write MaskThese bits are used to protect the corresponding register of P0_DOUT bit[2]. When set the DMASK bit[2] to "1", the corresponding DOUT2 bit is protected. The write signal is masked, write data to the protect bit is ignored0 = The corresponding P0_DOUT[2] bit can be updated1 = The corresponding P0_DOUT[2] bit is protected
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,unsigned> dmask2{}; 
        ///P0 Data Output Write MaskThese bits are used to protect the corresponding register of P0_DOUT bit[3]. When set the DMASK bit[3] to "1", the corresponding DOUT3 bit is protected. The write signal is masked, write data to the protect bit is ignored0 = The corresponding P0_DOUT[3] bit can be updated1 = The corresponding P0_DOUT[3] bit is protected
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,unsigned> dmask3{}; 
        ///P0 Data Output Write MaskThese bits are used to protect the corresponding register of P0_DOUT bit[4]. When set the DMASK bit[4] to "1", the corresponding DOUT4 bit is protected. The write signal is masked, write data to the protect bit is ignored0 = The corresponding P0_DOUT[4] bit can be updated1 = The corresponding P0_DOUT[4] bit is protected
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,unsigned> dmask4{}; 
        ///P0 Data Output Write MaskThese bits are used to protect the corresponding register of P0_DOUT bit[6]. When set the DMASK bit[6] to "1", the corresponding DOUT6 bit is protected. The write signal is masked, write data to the protect bit is ignored0 = The corresponding P0_DOUT[6] bit can be updated1 = The corresponding P0_DOUT[6] bit is protected
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,unsigned> dmask5{}; 
        ///P0 Data Output Write MaskThese bits are used to protect the corresponding register of P0_DOUT bit[6]. When set the DMASK bit[6] to "1", the corresponding DOUT6 bit is protected. The write signal is masked, write data to the protect bit is ignored0 = The corresponding P0_DOUT[6] bit can be updated1 = The corresponding P0_DOUT[6] bit is protected
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,unsigned> dmask6{}; 
        ///P0 Data Output Write MaskThese bits are used to protect the corresponding register of P0_DOUT bit[7]. When set the DMASK bit[7] to "1", the corresponding DOUT7 bit is protected. The write signal is masked, write data to the protect bit is ignored0 = The corresponding P0_DOUT[7] bit can be updated1 = The corresponding P0_DOUT[7] bit is protected
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,unsigned> dmask7{}; 
    }
    namespace Gp0Pin{    ///<Pin Value
        using Addr = Register::Address<0x50004010,0xffffff00,0x00000000,unsigned>;
        ///P0 Pin ValuesThe value read from each of these bit reflects the actual status of the respective P0 Pin[0].
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,unsigned> pin0{}; 
        ///P0 Pin ValuesThe value read from each of these bit reflects the actual status of the respective P0 Pin[1].
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,unsigned> pin1{}; 
        ///P0 Pin ValuesThe value read from each of these bit reflects the actual status of the respective P0 Pin[2].
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,unsigned> pin2{}; 
        ///P0 Pin ValuesThe value read from each of these bit reflects the actual status of the respective P0 Pin[3].
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,unsigned> pin3{}; 
        ///P0 Pin ValuesThe value read from each of these bit reflects the actual status of the respective P0 Pin[4].
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,unsigned> pin4{}; 
        ///P0 Pin ValuesThe value read from each of these bit reflects the actual status of the respective P0 Pin[5].
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,unsigned> pin5{}; 
        ///P0 Pin ValuesThe value read from each of these bit reflects the actual status of the respective P0 Pin[6].
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,unsigned> pin6{}; 
        ///P0 Pin ValuesThe value read from each of these bit reflects the actual status of the respective P0 Pin[7].
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::Access<Register::AccessType::readOnly,Register::ReadActionType::normal,Register::ModifiedWriteValueType::normal>,unsigned> pin7{}; 
    }
    namespace Gp0Dben{    ///<De-bounce Enable
        using Addr = Register::Address<0x50004014,0xffffff00,0x00000000,unsigned>;
        ///P0 Input Signal De-bounce EnableDBEN[0] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.The DBEN[0] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt0 = The bit[0] de-bounce function is disabled1 = The bit[0] de-bounce function is enabledThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,unsigned> dben0{}; 
        ///P0 Input Signal De-bounce EnableDBEN[1] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.The DBEN[1] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt0 = The bit[1] de-bounce function is disabled1 = The bit[1] de-bounce function is enabledThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,unsigned> dben1{}; 
        ///P0 Input Signal De-bounce EnableDBEN[2] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.The DBEN[2] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt0 = The bit[2] de-bounce function is disabled1 = The bit[2] de-bounce function is enabledThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,unsigned> dben2{}; 
        ///P0 Input Signal De-bounce EnableDBEN[3] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.The DBEN[3] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt0 = The bit[3] de-bounce function is disabled1 = The bit[3] de-bounce function is enabledThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,unsigned> dben3{}; 
        ///P0 Input Signal De-bounce EnableDBEN[4] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.The DBEN[4] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt0 = The bit[4] de-bounce function is disabled1 = The bit[4] de-bounce function is enabledThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,unsigned> dben4{}; 
        ///P0 Input Signal De-bounce EnableDBEN[5] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.The DBEN[5] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt0 = The bit[5] de-bounce function is disabled1 = The bit[5] de-bounce function is enabledThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,unsigned> dben5{}; 
        ///P0 Input Signal De-bounce EnableDBEN[6] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.The DBEN[6] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt0 = The bit[6] de-bounce function is disabled1 = The bit[6] de-bounce function is enabledThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,unsigned> dben6{}; 
        ///P0 Input Signal De-bounce EnableDBEN[7] used to enable the de-bounce function for each corresponding bit. if the input signal pulse width can't be sampled by continuous two de-bounce sample cycle. The input signal transition is seen as the signal bounce and will not trigger the interrupt.The DBEN[7] is used for "edge-trigger" interrupt only, and ignored for "level trigger" interrupt0 = The bit[7] de-bounce function is disabled1 = The bit[7] de-bounce function is enabledThe de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,unsigned> dben7{}; 
    }
    namespace Gp0Imd{    ///<Interrupt Mode Control
        using Addr = Register::Address<0x50004018,0xffffff00,0x00000000,unsigned>;
        ///Port 0 Interrupt Mode ControlIMD[0] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt0 = Edge trigger interrupt1 = Level trigger interruptif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.if set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.The de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,unsigned> imd0{}; 
        ///Port 0 Interrupt Mode ControlIMD[1] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt0 = Edge trigger interrupt1 = Level trigger interruptif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.if set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.The de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,unsigned> imd1{}; 
        ///Port 0 Interrupt Mode ControlIMD[2] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt0 = Edge trigger interrupt1 = Level trigger interruptif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.if set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.The de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,unsigned> imd2{}; 
        ///Port 0 Interrupt Mode ControlIMD[3] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt0 = Edge trigger interrupt1 = Level trigger interruptif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.if set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.The de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,unsigned> imd3{}; 
        ///Port 0 Interrupt Mode ControlIMD[4] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt0 = Edge trigger interrupt1 = Level trigger interruptif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.if set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.The de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,unsigned> imd4{}; 
        ///Port 0 Interrupt Mode ControlIMD[5] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt0 = Edge trigger interrupt1 = Level trigger interruptif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.if set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.The de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,unsigned> imd5{}; 
        ///Port 0 Interrupt Mode ControlIMD[6] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt0 = Edge trigger interrupt1 = Level trigger interruptif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.if set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.The de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,unsigned> imd6{}; 
        ///Port 0 Interrupt Mode ControlIMD[7] used to control the interrupt is by level trigger or by edge trigger. If the interrupt is by edge trigger, the trigger souce is control de-bounce. If the interrupt is by level trigger, the input source is sampled by one clock and the generate the interrupt0 = Edge trigger interrupt1 = Level trigger interruptif set pin as the level trigger interrupt, then only one level can be set on the registers P0_IEN.if set both the level to trigger interrupt, the setting is ignored and no interrupt will occur.The de-bounce function is valid for edge triggered interrupt. if the interrupt mode is level triggered, the de-bounce enable bit is ignored.
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,unsigned> imd7{}; 
    }
    namespace Gp0Ien{    ///<Interrupt Enable
        using Addr = Register::Address<0x5000401c,0xff00ff00,0x00000000,unsigned>;
        ///Port0 Interrupt Enable by Input Falling Edge or Input Level LowIF_EN[0] used to enable the interrupt for each of the corresponding input P0[0]. Set bit "1" also enable the pin wakeup function.When set the IF_EN[0] bit "1":If the interrupt is level mode trigger, the input P0[0] state at level "low" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[0] state change from "high-to-low" will generate the interrupt.1 = Enable the P0[0] state low-level or high-to-low change interrupt0 = Disable the P0[0] state low-level or high-to-low change interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,unsigned> ifEn0{}; 
        ///Port0 Interrupt Enable by Input Falling Edge or Input Level LowIF_EN[1] used to enable the interrupt for each of the corresponding input P0[1]. Set bit "1" also enable the pin wakeup function.When set the IF_EN[1] bit "1":If the interrupt is level mode trigger, the input P0[1] state at level "low" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[1] state change from "high-to-low" will generate the interrupt.1 = Enable the P0[1] state low-level or high-to-low change interrupt0 = Disable the P0[1] state low-level or high-to-low change interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,unsigned> ifEn1{}; 
        ///Port0 Interrupt Enable by Input Falling Edge or Input Level LowIF_EN[2] used to enable the interrupt for each of the corresponding input P0[2]. Set bit "1" also enable the pin wakeup function.When set the IF_EN[2] bit "1":If the interrupt is level mode trigger, the input P0[2] state at level "low" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[2] state change from "high-to-low" will generate the interrupt.1 = Enable the P0[2] state low-level or high-to-low change interrupt0 = Disable the P0[2] state low-level or high-to-low change interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,unsigned> ifEn2{}; 
        ///Port0 Interrupt Enable by Input Falling Edge or Input Level LowIF_EN[3] used to enable the interrupt for each of the corresponding input P0[3]. Set bit "1" also enable the pin wakeup function.When set the IF_EN[3] bit "1":If the interrupt is level mode trigger, the input P0[3] state at level "low" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[3] state change from "high-to-low" will generate the interrupt.1 = Enable the P0[3] state low-level or high-to-low change interrupt0 = Disable the P0[3] state low-level or high-to-low change interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,unsigned> ifEn3{}; 
        ///Port0 Interrupt Enable by Input Falling Edge or Input Level LowIF_EN[4] used to enable the interrupt for each of the corresponding input P0[4]. Set bit "1" also enable the pin wakeup function.When set the IF_EN[4] bit "1":If the interrupt is level mode trigger, the input P0[4] state at level "low" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[4] state change from "high-to-low" will generate the interrupt.1 = Enable the P0[4] state low-level or high-to-low change interrupt0 = Disable the P0[4] state low-level or high-to-low change interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,unsigned> ifEn4{}; 
        ///Port0 Interrupt Enable by Input Falling Edge or Input Level LowIF_EN[5] used to enable the interrupt for each of the corresponding input P0[5]. Set bit "1" also enable the pin wakeup function.When set the IF_EN[5] bit "1":If the interrupt is level mode trigger, the input P0[5] state at level "low" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[5] state change from "high-to-low" will generate the interrupt.1 = Enable the P0[5] state low-level or high-to-low change interrupt0 = Disable the P0[5] state low-level or high-to-low change interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,unsigned> ifEn5{}; 
        ///Port0 Interrupt Enable by Input Falling Edge or Input Level LowIF_EN[6] used to enable the interrupt for each of the corresponding input P0[6]. Set bit "1" also enable the pin wakeup function.When set the IF_EN[6] bit "1":If the interrupt is level mode trigger, the input P0[6] state at level "low" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[6] state change from "high-to-low" will generate the interrupt.1 = Enable the P0[6] state low-level or high-to-low change interrupt0 = Disable the P0[6] state low-level or high-to-low change interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,unsigned> ifEn6{}; 
        ///Port0 Interrupt Enable by Input Falling Edge or Input Level LowIF_EN[7] used to enable the interrupt for each of the corresponding input P0[7]. Set bit "1" also enable the pin wakeup function.When set the IF_EN[7] bit "1":If the interrupt is level mode trigger, the input P0[7] state at level "low" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[7] state change from "high-to-low" will generate the interrupt.1 = Enable the P0[7] state low-level or high-to-low change interrupt0 = Disable the P0[7] state low-level or high-to-low change interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,unsigned> ifEn7{}; 
        ///Port 0 Interrupt Enable by Input Rising Edge or Input Level HighIR_EN[0] used to enable the interrupt for each of the corresponding input P0[0]. Set bit "1" also enable the pin wakeup function.When set the IR_EN[0] bit "1":If the interrupt is level mode trigger, the input P0[0] state at level "high" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[0] state change from "low-to-high" will generate the interrupt.1 = Enable the P0[0] level-high or low-to-high interrupt0 = Disable the P0[0] level-high or low-to-high interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(16,16),Register::ReadWriteAccess,unsigned> irEn0{}; 
        ///Port 0 Interrupt Enable by Input Rising Edge or Input Level HighIR_EN[1] used to enable the interrupt for each of the corresponding input P0[1]. Set bit "1" also enable the pin wakeup function.When set the IR_EN[1] bit "1":If the interrupt is level mode trigger, the input P0[1] state at level "high" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[1] state change from "low-to-high" will generate the interrupt.1 = Enable the P0[1] level-high or low-to-high interrupt0 = Disable the P0[1] level-high or low-to-high interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(17,17),Register::ReadWriteAccess,unsigned> irEn1{}; 
        ///Port 0 Interrupt Enable by Input Rising Edge or Input Level HighIR_EN[2] used to enable the interrupt for each of the corresponding input P0[2]. Set bit "1" also enable the pin wakeup function.When set the IR_EN[2] bit "1":If the interrupt is level mode trigger, the input P0[2] state at level "high" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[2] state change from "low-to-high" will generate the interrupt.1 = Enable the P0[2] level-high or low-to-high interrupt0 = Disable the P0[2] level-high or low-to-high interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(18,18),Register::ReadWriteAccess,unsigned> irEn2{}; 
        ///Port 0 Interrupt Enable by Input Rising Edge or Input Level HighIR_EN[3] used to enable the interrupt for each of the corresponding input P0[3]. Set bit "1" also enable the pin wakeup function.When set the IR_EN[3] bit "1":If the interrupt is level mode trigger, the input P0[3] state at level "high" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[3] state change from "low-to-high" will generate the interrupt.1 = Enable the P0[3] level-high or low-to-high interrupt0 = Disable the P0[3] level-high or low-to-high interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(19,19),Register::ReadWriteAccess,unsigned> irEn3{}; 
        ///Port 0 Interrupt Enable by Input Rising Edge or Input Level HighIR_EN[4] used to enable the interrupt for each of the corresponding input P0[4]. Set bit "1" also enable the pin wakeup function.When set the IR_EN[4] bit "1":If the interrupt is level mode trigger, the input P0[4] state at level "high" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[4] state change from "low-to-high" will generate the interrupt.1 = Enable the P0[4] level-high or low-to-high interrupt0 = Disable the P0[4] level-high or low-to-high interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(20,20),Register::ReadWriteAccess,unsigned> irEn4{}; 
        ///Port 0 Interrupt Enable by Input Rising Edge or Input Level HighIR_EN[5] used to enable the interrupt for each of the corresponding input P0[5]. Set bit "1" also enable the pin wakeup function.When set the IR_EN[5] bit "1":If the interrupt is level mode trigger, the input P0[5] state at level "high" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[5] state change from "low-to-high" will generate the interrupt.1 = Enable the P0[5] level-high or low-to-high interrupt0 = Disable the P0[5] level-high or low-to-high interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(21,21),Register::ReadWriteAccess,unsigned> irEn5{}; 
        ///Port 0 Interrupt Enable by Input Rising Edge or Input Level HighIR_EN[6] used to enable the interrupt for each of the corresponding input P0[6]. Set bit "1" also enable the pin wakeup function.When set the IR_EN[6] bit "1":If the interrupt is level mode trigger, the input P0[6] state at level "high" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[6] state change from "low-to-high" will generate the interrupt.1 = Enable the P0[6] level-high or low-to-high interrupt0 = Disable the P0[6] level-high or low-to-high interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(22,22),Register::ReadWriteAccess,unsigned> irEn6{}; 
        ///Port 0 Interrupt Enable by Input Rising Edge or Input Level HighIR_EN[7] used to enable the interrupt for each of the corresponding input P0[7]. Set bit "1" also enable the pin wakeup function.When set the IR_EN[7] bit "1":If the interrupt is level mode trigger, the input P0[7] state at level "high" will generate the interrupt.If the interrupt is edge mode trigger, the input P0[7] state change from "low-to-high" will generate the interrupt.1 = Enable the P0[7] level-high or low-to-high interrupt0 = Disable the P0[7] level-high or low-to-high interrupt
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(23,23),Register::ReadWriteAccess,unsigned> irEn7{}; 
    }
    namespace Gp0Isrc{    ///<Interrupt Trigger Source
        using Addr = Register::Address<0x50004020,0xffffffff,0x00000000,unsigned>;
        ///Port 0 Interrupt Trigger Source IndicatorRead:1 = Indicates P0[0] generate an interrupt0 = No interrupt at P0[0]Write:1 = Clear the correspond pending interrupt0 = No action
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(0,0),Register::Access<Register::AccessType::readWrite,Register::ReadActionType::normal,Register::ModifiedWriteValueType::oneToClear>,unsigned> isrc0{}; 
        ///Port 0 Interrupt Trigger Source IndicatorRead:1 = Indicates P0[1] generate an interrupt0 = No interrupt at P0[1]Write:1 = Clear the correspond pending interrupt0 = No action
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(1,1),Register::Access<Register::AccessType::readWrite,Register::ReadActionType::normal,Register::ModifiedWriteValueType::oneToClear>,unsigned> isrc1{}; 
        ///Port 0 Interrupt Trigger Source IndicatorRead:1 = Indicates P0[2] generate an interrupt0 = No interrupt at P0[2]Write:1 = Clear the correspond pending interrupt0 = No action
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(2,2),Register::Access<Register::AccessType::readWrite,Register::ReadActionType::normal,Register::ModifiedWriteValueType::oneToClear>,unsigned> isrc2{}; 
        ///Port 0 Interrupt Trigger Source IndicatorRead:1 = Indicates P0[3] generate an interrupt0 = No interrupt at P0[3]Write:1 = Clear the correspond pending interrupt0 = No action
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(3,3),Register::Access<Register::AccessType::readWrite,Register::ReadActionType::normal,Register::ModifiedWriteValueType::oneToClear>,unsigned> isrc3{}; 
        ///Port 0 Interrupt Trigger Source IndicatorRead:1 = Indicates P0[4] generate an interrupt0 = No interrupt at P0[4]Write:1 = Clear the correspond pending interrupt0 = No action
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(4,4),Register::Access<Register::AccessType::readWrite,Register::ReadActionType::normal,Register::ModifiedWriteValueType::oneToClear>,unsigned> isrc4{}; 
        ///Port 0 Interrupt Trigger Source IndicatorRead:1 = Indicates P0[5] generate an interrupt0 = No interrupt at P0[5]Write:1 = Clear the correspond pending interrupt0 = No action
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(5,5),Register::Access<Register::AccessType::readWrite,Register::ReadActionType::normal,Register::ModifiedWriteValueType::oneToClear>,unsigned> isrc5{}; 
        ///Port 0 Interrupt Trigger Source IndicatorRead:1 = Indicates P0[6] generate an interrupt0 = No interrupt at P0[6]Write:1 = Clear the correspond pending interrupt0 = No action
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(6,6),Register::Access<Register::AccessType::readWrite,Register::ReadActionType::normal,Register::ModifiedWriteValueType::oneToClear>,unsigned> isrc6{}; 
        ///Port 0 Interrupt Trigger Source IndicatorRead:1 = Indicates P0[7] generate an interrupt0 = No interrupt at P0[7]Write:1 = Clear the correspond pending interrupt0 = No action
        constexpr Register::FieldLocation<Addr,Register::maskFromRange(7,7),Register::Access<Register::AccessType::readWrite,Register::ReadActionType::normal,Register::ModifiedWriteValueType::oneToClear>,unsigned> isrc7{}; 
    }
}
