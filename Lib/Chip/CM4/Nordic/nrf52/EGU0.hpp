#pragma once 
#include "Register/Utility.hpp"
namespace Kvasir {
//Event Generator Unit 0
    namespace NonetasksTrigger0{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014000,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger1{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014004,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger2{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014008,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger3{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x4001400c,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger4{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014010,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger5{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014014,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger6{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014018,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger7{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x4001401c,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger8{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014020,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger9{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014024,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger10{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014028,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger11{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x4001402c,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger12{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014030,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger13{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014034,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger14{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x40014038,0xffffffff,0,unsigned>;
    }
    namespace NonetasksTrigger15{    ///<Description collection[0]:  Trigger 0 for triggering the corresponding TRIGGERED[0] event
        using Addr = Register::Address<0x4001403c,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered0{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014100,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered1{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014104,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered2{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014108,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered3{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x4001410c,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered4{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014110,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered5{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014114,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered6{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014118,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered7{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x4001411c,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered8{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014120,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered9{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014124,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered10{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014128,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered11{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x4001412c,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered12{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014130,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered13{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014134,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered14{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x40014138,0xffffffff,0,unsigned>;
    }
    namespace NoneeventsTriggered15{    ///<Description collection[0]:  Event number 0 generated by triggering the corresponding TRIGGER[0] task
        using Addr = Register::Address<0x4001413c,0xffffffff,0,unsigned>;
    }
    namespace Noneinten{    ///<Enable or disable interrupt
        using Addr = Register::Address<0x40014300,0xffff0000,0,unsigned>;
        ///Enable or disable interrupt on EVENTS_TRIGGERED[0] event
        enum class triggered0Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered0ValC{
            constexpr MPL::Value<triggered0Val,triggered0Val::disabled> disabled{};
            constexpr MPL::Value<triggered0Val,triggered0Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,triggered0Val> triggered0{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[1] event
        enum class triggered1Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered1ValC{
            constexpr MPL::Value<triggered1Val,triggered1Val::disabled> disabled{};
            constexpr MPL::Value<triggered1Val,triggered1Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,triggered1Val> triggered1{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[2] event
        enum class triggered2Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered2ValC{
            constexpr MPL::Value<triggered2Val,triggered2Val::disabled> disabled{};
            constexpr MPL::Value<triggered2Val,triggered2Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,triggered2Val> triggered2{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[3] event
        enum class triggered3Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered3ValC{
            constexpr MPL::Value<triggered3Val,triggered3Val::disabled> disabled{};
            constexpr MPL::Value<triggered3Val,triggered3Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,triggered3Val> triggered3{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[4] event
        enum class triggered4Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered4ValC{
            constexpr MPL::Value<triggered4Val,triggered4Val::disabled> disabled{};
            constexpr MPL::Value<triggered4Val,triggered4Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,triggered4Val> triggered4{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[5] event
        enum class triggered5Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered5ValC{
            constexpr MPL::Value<triggered5Val,triggered5Val::disabled> disabled{};
            constexpr MPL::Value<triggered5Val,triggered5Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,triggered5Val> triggered5{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[6] event
        enum class triggered6Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered6ValC{
            constexpr MPL::Value<triggered6Val,triggered6Val::disabled> disabled{};
            constexpr MPL::Value<triggered6Val,triggered6Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,triggered6Val> triggered6{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[7] event
        enum class triggered7Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered7ValC{
            constexpr MPL::Value<triggered7Val,triggered7Val::disabled> disabled{};
            constexpr MPL::Value<triggered7Val,triggered7Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,triggered7Val> triggered7{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[8] event
        enum class triggered8Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered8ValC{
            constexpr MPL::Value<triggered8Val,triggered8Val::disabled> disabled{};
            constexpr MPL::Value<triggered8Val,triggered8Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(8,8),Register::ReadWriteAccess,triggered8Val> triggered8{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[9] event
        enum class triggered9Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered9ValC{
            constexpr MPL::Value<triggered9Val,triggered9Val::disabled> disabled{};
            constexpr MPL::Value<triggered9Val,triggered9Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(9,9),Register::ReadWriteAccess,triggered9Val> triggered9{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[10] event
        enum class triggered10Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered10ValC{
            constexpr MPL::Value<triggered10Val,triggered10Val::disabled> disabled{};
            constexpr MPL::Value<triggered10Val,triggered10Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(10,10),Register::ReadWriteAccess,triggered10Val> triggered10{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[11] event
        enum class triggered11Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered11ValC{
            constexpr MPL::Value<triggered11Val,triggered11Val::disabled> disabled{};
            constexpr MPL::Value<triggered11Val,triggered11Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(11,11),Register::ReadWriteAccess,triggered11Val> triggered11{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[12] event
        enum class triggered12Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered12ValC{
            constexpr MPL::Value<triggered12Val,triggered12Val::disabled> disabled{};
            constexpr MPL::Value<triggered12Val,triggered12Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(12,12),Register::ReadWriteAccess,triggered12Val> triggered12{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[13] event
        enum class triggered13Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered13ValC{
            constexpr MPL::Value<triggered13Val,triggered13Val::disabled> disabled{};
            constexpr MPL::Value<triggered13Val,triggered13Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(13,13),Register::ReadWriteAccess,triggered13Val> triggered13{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[14] event
        enum class triggered14Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered14ValC{
            constexpr MPL::Value<triggered14Val,triggered14Val::disabled> disabled{};
            constexpr MPL::Value<triggered14Val,triggered14Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(14,14),Register::ReadWriteAccess,triggered14Val> triggered14{}; 
        ///Enable or disable interrupt on EVENTS_TRIGGERED[15] event
        enum class triggered15Val {
            disabled=0x00000000,     ///<Disable
            enabled=0x00000001,     ///<Enable
        };
        namespace triggered15ValC{
            constexpr MPL::Value<triggered15Val,triggered15Val::disabled> disabled{};
            constexpr MPL::Value<triggered15Val,triggered15Val::enabled> enabled{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(15,15),Register::ReadWriteAccess,triggered15Val> triggered15{}; 
    }
    namespace Noneintenset{    ///<Enable interrupt
        using Addr = Register::Address<0x40014304,0xffff0000,0,unsigned>;
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[0] event
        enum class triggered0Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered0ValC{
            constexpr MPL::Value<triggered0Val,triggered0Val::disabled> disabled{};
            constexpr MPL::Value<triggered0Val,triggered0Val::enabled> enabled{};
            constexpr MPL::Value<triggered0Val,triggered0Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,triggered0Val> triggered0{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[1] event
        enum class triggered1Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered1ValC{
            constexpr MPL::Value<triggered1Val,triggered1Val::disabled> disabled{};
            constexpr MPL::Value<triggered1Val,triggered1Val::enabled> enabled{};
            constexpr MPL::Value<triggered1Val,triggered1Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,triggered1Val> triggered1{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[2] event
        enum class triggered2Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered2ValC{
            constexpr MPL::Value<triggered2Val,triggered2Val::disabled> disabled{};
            constexpr MPL::Value<triggered2Val,triggered2Val::enabled> enabled{};
            constexpr MPL::Value<triggered2Val,triggered2Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,triggered2Val> triggered2{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[3] event
        enum class triggered3Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered3ValC{
            constexpr MPL::Value<triggered3Val,triggered3Val::disabled> disabled{};
            constexpr MPL::Value<triggered3Val,triggered3Val::enabled> enabled{};
            constexpr MPL::Value<triggered3Val,triggered3Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,triggered3Val> triggered3{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[4] event
        enum class triggered4Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered4ValC{
            constexpr MPL::Value<triggered4Val,triggered4Val::disabled> disabled{};
            constexpr MPL::Value<triggered4Val,triggered4Val::enabled> enabled{};
            constexpr MPL::Value<triggered4Val,triggered4Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,triggered4Val> triggered4{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[5] event
        enum class triggered5Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered5ValC{
            constexpr MPL::Value<triggered5Val,triggered5Val::disabled> disabled{};
            constexpr MPL::Value<triggered5Val,triggered5Val::enabled> enabled{};
            constexpr MPL::Value<triggered5Val,triggered5Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,triggered5Val> triggered5{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[6] event
        enum class triggered6Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered6ValC{
            constexpr MPL::Value<triggered6Val,triggered6Val::disabled> disabled{};
            constexpr MPL::Value<triggered6Val,triggered6Val::enabled> enabled{};
            constexpr MPL::Value<triggered6Val,triggered6Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,triggered6Val> triggered6{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[7] event
        enum class triggered7Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered7ValC{
            constexpr MPL::Value<triggered7Val,triggered7Val::disabled> disabled{};
            constexpr MPL::Value<triggered7Val,triggered7Val::enabled> enabled{};
            constexpr MPL::Value<triggered7Val,triggered7Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,triggered7Val> triggered7{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[8] event
        enum class triggered8Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered8ValC{
            constexpr MPL::Value<triggered8Val,triggered8Val::disabled> disabled{};
            constexpr MPL::Value<triggered8Val,triggered8Val::enabled> enabled{};
            constexpr MPL::Value<triggered8Val,triggered8Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(8,8),Register::ReadWriteAccess,triggered8Val> triggered8{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[9] event
        enum class triggered9Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered9ValC{
            constexpr MPL::Value<triggered9Val,triggered9Val::disabled> disabled{};
            constexpr MPL::Value<triggered9Val,triggered9Val::enabled> enabled{};
            constexpr MPL::Value<triggered9Val,triggered9Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(9,9),Register::ReadWriteAccess,triggered9Val> triggered9{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[10] event
        enum class triggered10Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered10ValC{
            constexpr MPL::Value<triggered10Val,triggered10Val::disabled> disabled{};
            constexpr MPL::Value<triggered10Val,triggered10Val::enabled> enabled{};
            constexpr MPL::Value<triggered10Val,triggered10Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(10,10),Register::ReadWriteAccess,triggered10Val> triggered10{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[11] event
        enum class triggered11Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered11ValC{
            constexpr MPL::Value<triggered11Val,triggered11Val::disabled> disabled{};
            constexpr MPL::Value<triggered11Val,triggered11Val::enabled> enabled{};
            constexpr MPL::Value<triggered11Val,triggered11Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(11,11),Register::ReadWriteAccess,triggered11Val> triggered11{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[12] event
        enum class triggered12Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered12ValC{
            constexpr MPL::Value<triggered12Val,triggered12Val::disabled> disabled{};
            constexpr MPL::Value<triggered12Val,triggered12Val::enabled> enabled{};
            constexpr MPL::Value<triggered12Val,triggered12Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(12,12),Register::ReadWriteAccess,triggered12Val> triggered12{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[13] event
        enum class triggered13Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered13ValC{
            constexpr MPL::Value<triggered13Val,triggered13Val::disabled> disabled{};
            constexpr MPL::Value<triggered13Val,triggered13Val::enabled> enabled{};
            constexpr MPL::Value<triggered13Val,triggered13Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(13,13),Register::ReadWriteAccess,triggered13Val> triggered13{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[14] event
        enum class triggered14Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered14ValC{
            constexpr MPL::Value<triggered14Val,triggered14Val::disabled> disabled{};
            constexpr MPL::Value<triggered14Val,triggered14Val::enabled> enabled{};
            constexpr MPL::Value<triggered14Val,triggered14Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(14,14),Register::ReadWriteAccess,triggered14Val> triggered14{}; 
        ///Write '1' to Enable interrupt on EVENTS_TRIGGERED[15] event
        enum class triggered15Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            set=0x00000001,     ///<Enable
        };
        namespace triggered15ValC{
            constexpr MPL::Value<triggered15Val,triggered15Val::disabled> disabled{};
            constexpr MPL::Value<triggered15Val,triggered15Val::enabled> enabled{};
            constexpr MPL::Value<triggered15Val,triggered15Val::set> set{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(15,15),Register::ReadWriteAccess,triggered15Val> triggered15{}; 
    }
    namespace Noneintenclr{    ///<Disable interrupt
        using Addr = Register::Address<0x40014308,0xffff0000,0,unsigned>;
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[0] event
        enum class triggered0Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered0ValC{
            constexpr MPL::Value<triggered0Val,triggered0Val::disabled> disabled{};
            constexpr MPL::Value<triggered0Val,triggered0Val::enabled> enabled{};
            constexpr MPL::Value<triggered0Val,triggered0Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(0,0),Register::ReadWriteAccess,triggered0Val> triggered0{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[1] event
        enum class triggered1Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered1ValC{
            constexpr MPL::Value<triggered1Val,triggered1Val::disabled> disabled{};
            constexpr MPL::Value<triggered1Val,triggered1Val::enabled> enabled{};
            constexpr MPL::Value<triggered1Val,triggered1Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(1,1),Register::ReadWriteAccess,triggered1Val> triggered1{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[2] event
        enum class triggered2Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered2ValC{
            constexpr MPL::Value<triggered2Val,triggered2Val::disabled> disabled{};
            constexpr MPL::Value<triggered2Val,triggered2Val::enabled> enabled{};
            constexpr MPL::Value<triggered2Val,triggered2Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(2,2),Register::ReadWriteAccess,triggered2Val> triggered2{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[3] event
        enum class triggered3Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered3ValC{
            constexpr MPL::Value<triggered3Val,triggered3Val::disabled> disabled{};
            constexpr MPL::Value<triggered3Val,triggered3Val::enabled> enabled{};
            constexpr MPL::Value<triggered3Val,triggered3Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(3,3),Register::ReadWriteAccess,triggered3Val> triggered3{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[4] event
        enum class triggered4Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered4ValC{
            constexpr MPL::Value<triggered4Val,triggered4Val::disabled> disabled{};
            constexpr MPL::Value<triggered4Val,triggered4Val::enabled> enabled{};
            constexpr MPL::Value<triggered4Val,triggered4Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(4,4),Register::ReadWriteAccess,triggered4Val> triggered4{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[5] event
        enum class triggered5Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered5ValC{
            constexpr MPL::Value<triggered5Val,triggered5Val::disabled> disabled{};
            constexpr MPL::Value<triggered5Val,triggered5Val::enabled> enabled{};
            constexpr MPL::Value<triggered5Val,triggered5Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(5,5),Register::ReadWriteAccess,triggered5Val> triggered5{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[6] event
        enum class triggered6Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered6ValC{
            constexpr MPL::Value<triggered6Val,triggered6Val::disabled> disabled{};
            constexpr MPL::Value<triggered6Val,triggered6Val::enabled> enabled{};
            constexpr MPL::Value<triggered6Val,triggered6Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(6,6),Register::ReadWriteAccess,triggered6Val> triggered6{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[7] event
        enum class triggered7Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered7ValC{
            constexpr MPL::Value<triggered7Val,triggered7Val::disabled> disabled{};
            constexpr MPL::Value<triggered7Val,triggered7Val::enabled> enabled{};
            constexpr MPL::Value<triggered7Val,triggered7Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(7,7),Register::ReadWriteAccess,triggered7Val> triggered7{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[8] event
        enum class triggered8Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered8ValC{
            constexpr MPL::Value<triggered8Val,triggered8Val::disabled> disabled{};
            constexpr MPL::Value<triggered8Val,triggered8Val::enabled> enabled{};
            constexpr MPL::Value<triggered8Val,triggered8Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(8,8),Register::ReadWriteAccess,triggered8Val> triggered8{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[9] event
        enum class triggered9Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered9ValC{
            constexpr MPL::Value<triggered9Val,triggered9Val::disabled> disabled{};
            constexpr MPL::Value<triggered9Val,triggered9Val::enabled> enabled{};
            constexpr MPL::Value<triggered9Val,triggered9Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(9,9),Register::ReadWriteAccess,triggered9Val> triggered9{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[10] event
        enum class triggered10Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered10ValC{
            constexpr MPL::Value<triggered10Val,triggered10Val::disabled> disabled{};
            constexpr MPL::Value<triggered10Val,triggered10Val::enabled> enabled{};
            constexpr MPL::Value<triggered10Val,triggered10Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(10,10),Register::ReadWriteAccess,triggered10Val> triggered10{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[11] event
        enum class triggered11Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered11ValC{
            constexpr MPL::Value<triggered11Val,triggered11Val::disabled> disabled{};
            constexpr MPL::Value<triggered11Val,triggered11Val::enabled> enabled{};
            constexpr MPL::Value<triggered11Val,triggered11Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(11,11),Register::ReadWriteAccess,triggered11Val> triggered11{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[12] event
        enum class triggered12Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered12ValC{
            constexpr MPL::Value<triggered12Val,triggered12Val::disabled> disabled{};
            constexpr MPL::Value<triggered12Val,triggered12Val::enabled> enabled{};
            constexpr MPL::Value<triggered12Val,triggered12Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(12,12),Register::ReadWriteAccess,triggered12Val> triggered12{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[13] event
        enum class triggered13Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered13ValC{
            constexpr MPL::Value<triggered13Val,triggered13Val::disabled> disabled{};
            constexpr MPL::Value<triggered13Val,triggered13Val::enabled> enabled{};
            constexpr MPL::Value<triggered13Val,triggered13Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(13,13),Register::ReadWriteAccess,triggered13Val> triggered13{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[14] event
        enum class triggered14Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered14ValC{
            constexpr MPL::Value<triggered14Val,triggered14Val::disabled> disabled{};
            constexpr MPL::Value<triggered14Val,triggered14Val::enabled> enabled{};
            constexpr MPL::Value<triggered14Val,triggered14Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(14,14),Register::ReadWriteAccess,triggered14Val> triggered14{}; 
        ///Write '1' to Clear interrupt on EVENTS_TRIGGERED[15] event
        enum class triggered15Val {
            disabled=0x00000000,     ///<Read: Disabled
            enabled=0x00000001,     ///<Read: Enabled
            clear=0x00000001,     ///<Disable
        };
        namespace triggered15ValC{
            constexpr MPL::Value<triggered15Val,triggered15Val::disabled> disabled{};
            constexpr MPL::Value<triggered15Val,triggered15Val::enabled> enabled{};
            constexpr MPL::Value<triggered15Val,triggered15Val::clear> clear{};
        }
        constexpr Register::BitLocation<Addr,Register::maskFromRange(15,15),Register::ReadWriteAccess,triggered15Val> triggered15{}; 
    }
}
